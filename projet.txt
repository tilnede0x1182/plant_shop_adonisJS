
# ARBORESCENCE
#
/home/tilnede0x1182/code/tilnede0x1182/Personnel/2025/Entrainement/plant_shop/Javascript/AdonisJS/plant_shop_adonisJS
├── ace
├── ace-manifest.json
├── app
│   ├── Controllers
│   │   └── Http
│   │       ├── Admin
│   │       │   ├── PlantsController.ts
│   │       │   └── UsersController.ts
│   │       ├── CartsController.ts
│   │       ├── OrdersController.ts
│   │       ├── PlantsController.ts
│   │       ├── RegistrationsController.ts
│   │       ├── SessionsController.ts
│   │       └── UsersController.ts
│   ├── controllers_summary.js
│   ├── Exceptions
│   │   └── Handler.ts
│   ├── Middleware
│   │   ├── Auth.ts
│   │   └── SilentAuth.ts
│   ├── Models
│   │   ├── OrderItem.ts
│   │   ├── Order.ts
│   │   ├── Plant.ts
│   │   └── User.ts
│   ├── models_summary.js
│   └── services_summary.js
├── commands
│   └── index.ts
├── config
│   ├── app.ts
│   ├── auth.ts
│   ├── bodyparser.ts
│   ├── cors.ts
│   ├── database.ts
│   ├── drive.ts
│   ├── hash.ts
│   ├── session.ts
│   ├── shield.ts
│   └── static.ts
├── contracts
│   ├── auth.ts
│   ├── drive.ts
│   ├── env.ts
│   ├── events.ts
│   ├── hash.ts
│   └── tests.ts
├── database
│   ├── factories
│   │   └── index.ts
│   ├── migrations
│   │   └── 1748636688321_create_tables.ts
│   └── seeders
│       └── Seed.ts
├── env.ts
├── Makefile
├── package.json
├── package-lock.json
├── projet.txt
├── providers
│   └── AppProvider.ts
├── public
│   ├── favicon.ico
│   ├── js
│   │   └── application.js
│   └── styles.css
├── resources
│   ├── views
│   │   ├── admin
│   │   │   ├── plants
│   │   │   │   ├── create.edge
│   │   │   │   ├── edit.edge
│   │   │   │   ├── _form.edge
│   │   │   │   ├── index.edge
│   │   │   │   └── new.edge
│   │   │   └── users
│   │   │       ├── edit.edge
│   │   │       ├── index.edge
│   │   │       └── show.edge
│   │   ├── carts
│   │   │   └── index.edge
│   │   ├── errors
│   │   │   ├── not-found.edge
│   │   │   ├── server-error.edge
│   │   │   └── unauthorized.edge
│   │   ├── layouts
│   │   │   ├── application.edge
│   │   │   ├── _flash_messages.edge
│   │   │   └── _navbar.edge
│   │   ├── orders
│   │   │   ├── create.edge
│   │   │   ├── index.edge
│   │   │   ├── new.edge
│   │   │   ├── _order_card.edge
│   │   │   └── show.edge
│   │   ├── plants
│   │   │   ├── edit.edge
│   │   │   ├── index.edge
│   │   │   └── show.edge
│   │   ├── registrations
│   │   │   └── register.edge
│   │   ├── sessions
│   │   │   └── login.edge
│   │   └── users
│   │       ├── edit.edge
│   │       └── show.edge
│   └── views_summary.js
├── server.ts
├── start
│   ├── kernel.ts
│   └── routes.ts
├── tests
│   ├── bootstrap.ts
│   └── functional
│       └── hello_world.spec.ts
├── test.ts
├── touch
├── tsconfig.json
└── users.txt

34 directories, 86 files

# CONFIG
#
## package.json

{
  "name": "plant_shop_adonisJS",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "node ace serve --watch",
    "build": "node ace build --production",
    "start": "node server.js",
    "test": "node ace test"
  },
  "devDependencies": {
    "@adonisjs/assembler": "^5.9.6",
    "@japa/runner": "^2.5.1",
    "@types/proxy-addr": "^2.0.3",
    "@types/source-map-support": "^0.5.10",
    "adonis-preset-ts": "^2.1.0",
    "pino-pretty": "^10.2.0",
    "typescript": "~4.6",
    "youch": "^3.3.4",
    "youch-terminal": "^2.2.3"
  },
  "dependencies": {
    "@adonisjs/auth": "^8.2.3",
    "@adonisjs/core": "^5.9.0",
    "@adonisjs/lucid": "^18.4.2",
    "@adonisjs/repl": "^3.1.11",
    "@adonisjs/session": "^6.4.0",
    "@adonisjs/shield": "^7.1.1",
    "@adonisjs/view": "^6.2.0",
    "luxon": "^3.4.4",
    "pg": "^8.16.0",
    "proxy-addr": "^2.0.7",
    "reflect-metadata": "^0.1.13",
    "source-map-support": "^0.5.21",
    "sqlite3": "^5.1.7"
  }
}


## .adonisrc.json

{
  "typescript": true,
  "commands": [
    "./commands",
    "@adonisjs/core/build/commands/index.js",
    "@adonisjs/repl/build/commands",
    "@adonisjs/lucid/build/commands"
  ],
  "exceptionHandlerNamespace": "App/Exceptions/Handler",
  "aliases": {
    "App": "app",
    "Config": "config",
    "Database": "database",
    "Contracts": "contracts"
  },
  "preloads": [
    "./start/routes",
    "./start/kernel"
  ],
  "providers": [
    "./providers/AppProvider",
    "@adonisjs/core",
    "@adonisjs/session",
    "@adonisjs/view",
    "@adonisjs/shield",
    "@adonisjs/lucid",
    "@adonisjs/auth"
  ],
  "metaFiles": [
    {
      "pattern": "public/**",
      "reloadServer": false
    },
    {
      "pattern": "resources/views/**/*.edge",
      "reloadServer": false
    }
  ],
  "aceProviders": [
    "@adonisjs/repl"
  ],
  "tests": {
    "suites": [
      {
        "name": "functional",
        "files": [
          "tests/functional/**/*.spec(.ts|.js)"
        ],
        "timeout": 60000
      }
    ]
  },
  "testProviders": [
    "@japa/preset-adonis/TestsProvider"
  ]
}

## ace-manifest.json

{
  "commands": {
    "dump:rcfile": {
      "settings": {},
      "commandPath": "@adonisjs/core/build/commands/DumpRc",
      "commandName": "dump:rcfile",
      "description": "Dump contents of .adonisrc.json file along with defaults",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "list:routes": {
      "settings": {
        "loadApp": true,
        "stayAlive": true
      },
      "commandPath": "@adonisjs/core/build/commands/ListRoutes/index",
      "commandName": "list:routes",
      "description": "List application routes",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "verbose",
          "propertyName": "verbose",
          "type": "boolean",
          "description": "Display more information"
        },
        {
          "name": "reverse",
          "propertyName": "reverse",
          "type": "boolean",
          "alias": "r",
          "description": "Reverse routes display"
        },
        {
          "name": "methods",
          "propertyName": "methodsFilter",
          "type": "array",
          "alias": "m",
          "description": "Filter routes by method"
        },
        {
          "name": "patterns",
          "propertyName": "patternsFilter",
          "type": "array",
          "alias": "p",
          "description": "Filter routes by the route pattern"
        },
        {
          "name": "names",
          "propertyName": "namesFilter",
          "type": "array",
          "alias": "n",
          "description": "Filter routes by route name"
        },
        {
          "name": "json",
          "propertyName": "json",
          "type": "boolean",
          "description": "Output as JSON"
        },
        {
          "name": "table",
          "propertyName": "table",
          "type": "boolean",
          "description": "Output as Table"
        },
        {
          "name": "max-width",
          "propertyName": "maxWidth",
          "type": "number",
          "description": "Specify maximum rendering width. Ignored for JSON Output"
        }
      ]
    },
    "generate:key": {
      "settings": {},
      "commandPath": "@adonisjs/core/build/commands/GenerateKey",
      "commandName": "generate:key",
      "description": "Generate a new APP_KEY secret",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "repl": {
      "settings": {
        "loadApp": true,
        "environment": "repl",
        "stayAlive": true
      },
      "commandPath": "@adonisjs/repl/build/commands/AdonisRepl",
      "commandName": "repl",
      "description": "Start a new REPL session",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "db:seed": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbSeed",
      "commandName": "db:seed",
      "description": "Execute database seeders",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection for the seeders",
          "alias": "c"
        },
        {
          "name": "interactive",
          "propertyName": "interactive",
          "type": "boolean",
          "description": "Run seeders in interactive mode",
          "alias": "i"
        },
        {
          "name": "files",
          "propertyName": "files",
          "type": "array",
          "description": "Define a custom set of seeders files names to run",
          "alias": "f"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "db:wipe": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbWipe",
      "commandName": "db:wipe",
      "description": "Drop all tables, views and types in database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "drop-views",
          "propertyName": "dropViews",
          "type": "boolean",
          "description": "Drop all views"
        },
        {
          "name": "drop-types",
          "propertyName": "dropTypes",
          "type": "boolean",
          "description": "Drop all custom types (Postgres only)"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        }
      ]
    },
    "db:truncate": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbTruncate",
      "commandName": "db:truncate",
      "description": "Truncate all tables in database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        }
      ]
    },
    "make:model": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/MakeModel",
      "commandName": "make:model",
      "description": "Make a new Lucid model",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the model class"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "migration",
          "propertyName": "migration",
          "type": "boolean",
          "alias": "m",
          "description": "Generate the migration for the model"
        },
        {
          "name": "controller",
          "propertyName": "controller",
          "type": "boolean",
          "alias": "c",
          "description": "Generate the controller for the model"
        },
        {
          "name": "factory",
          "propertyName": "factory",
          "type": "boolean",
          "alias": "f",
          "description": "Generate a factory for the model"
        }
      ]
    },
    "make:migration": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/MakeMigration",
      "commandName": "make:migration",
      "description": "Make a new migration file",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the migration file"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "The connection flag is used to lookup the directory for the migration file"
        },
        {
          "name": "folder",
          "propertyName": "folder",
          "type": "string",
          "description": "Pre-select a migration directory"
        },
        {
          "name": "create",
          "propertyName": "create",
          "type": "string",
          "description": "Define the table name for creating a new table"
        },
        {
          "name": "table",
          "propertyName": "table",
          "type": "string",
          "description": "Define the table name for altering an existing table"
        }
      ]
    },
    "make:seeder": {
      "settings": {},
      "commandPath": "@adonisjs/lucid/build/commands/MakeSeeder",
      "commandName": "make:seeder",
      "description": "Make a new Seeder file",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the seeder class"
        }
      ],
      "aliases": [],
      "flags": []
    },
    "make:factory": {
      "settings": {},
      "commandPath": "@adonisjs/lucid/build/commands/MakeFactory",
      "commandName": "make:factory",
      "description": "Make a new factory",
      "args": [
        {
          "type": "string",
          "propertyName": "model",
          "name": "model",
          "required": true,
          "description": "The name of the model"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "model-path",
          "propertyName": "modelPath",
          "type": "string",
          "description": "The path to the model"
        },
        {
          "name": "exact",
          "propertyName": "exact",
          "type": "boolean",
          "description": "Create the factory with the exact name as provided",
          "alias": "e"
        }
      ]
    },
    "migration:run": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Run",
      "commandName": "migration:run",
      "description": "Migrate database by running pending migrations",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force to run migrations in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        },
        {
          "name": "disable-locks",
          "propertyName": "disableLocks",
          "type": "boolean",
          "description": "Disable locks acquired to run migrations safely"
        }
      ]
    },
    "migration:rollback": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Rollback",
      "commandName": "migration:rollback",
      "description": "Rollback migrations to a specific batch number",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explictly force to run migrations in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "batch",
          "propertyName": "batch",
          "type": "number",
          "description": "Define custom batch number for rollback. Use 0 to rollback to initial state"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        },
        {
          "name": "disable-locks",
          "propertyName": "disableLocks",
          "type": "boolean",
          "description": "Disable locks acquired to run migrations safely"
        }
      ]
    },
    "migration:status": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Status",
      "commandName": "migration:status",
      "description": "View migrations status",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        }
      ]
    },
    "migration:reset": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Reset",
      "commandName": "migration:reset",
      "description": "Rollback all migrations",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "disable-locks",
          "propertyName": "disableLocks",
          "type": "boolean",
          "description": "Disable locks acquired to run migrations safely"
        }
      ]
    },
    "migration:refresh": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Refresh",
      "commandName": "migration:refresh",
      "description": "Rollback and migrate database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "seed",
          "propertyName": "seed",
          "type": "boolean",
          "description": "Run seeders"
        },
        {
          "name": "disable-locks",
          "propertyName": "disableLocks",
          "type": "boolean",
          "description": "Disable locks acquired to run migrations safely"
        }
      ]
    },
    "migration:fresh": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Fresh",
      "commandName": "migration:fresh",
      "description": "Drop all tables and re-migrate the database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "seed",
          "propertyName": "seed",
          "type": "boolean",
          "description": "Run seeders"
        },
        {
          "name": "drop-views",
          "propertyName": "dropViews",
          "type": "boolean",
          "description": "Drop all views"
        },
        {
          "name": "drop-types",
          "propertyName": "dropTypes",
          "type": "boolean",
          "description": "Drop all custom types (Postgres only)"
        },
        {
          "name": "disable-locks",
          "propertyName": "disableLocks",
          "type": "boolean",
          "description": "Disable locks acquired to run migrations safely"
        }
      ]
    }
  },
  "aliases": {}
}


## tsconfig.json

{
  "extends": "adonis-preset-ts/tsconfig.json",
  "include": [
    "**/*"
  ],
  "exclude": [
    "node_modules",
    "build"
  ],
  "compilerOptions": {
    "outDir": "build",
    "rootDir": "./",
    "baseUrl": "./",
    "sourceMap": true,
    "paths": {
      "App/*": [
        "./app/*"
      ],
      "Config/*": [
        "./config/*"
      ],
      "Contracts/*": [
        "./contracts/*"
      ],
      "Database/*": [
        "./database/*"
      ]
    },
    "types": [
      "@adonisjs/core",
      "@adonisjs/repl",
      "@adonisjs/session",
      "@adonisjs/view",
      "@adonisjs/shield",
      "@japa/preset-adonis/build/adonis-typings",
      "@adonisjs/lucid",
      "@adonisjs/auth"
    ]
  }
}

## server.ts

/*
|--------------------------------------------------------------------------
| AdonisJs Server
|--------------------------------------------------------------------------
|
| The contents in this file is meant to bootstrap the AdonisJs application
| and start the HTTP server to accept incoming connections. You must avoid
| making this file dirty and instead make use of `lifecycle hooks` provided
| by AdonisJs service providers for custom code.
|
*/

import 'reflect-metadata'
import sourceMapSupport from 'source-map-support'
import { Ignitor } from '@adonisjs/core/build/standalone'

sourceMapSupport.install({ handleUncaughtExceptions: false })

new Ignitor(__dirname)
  .httpServer()
  .start()


## env.ts

/*
|--------------------------------------------------------------------------
| Validating Environment Variables
|--------------------------------------------------------------------------
|
| In this file we define the rules for validating environment variables.
| By performing validation we ensure that your application is running in
| a stable environment with correct configuration values.
|
| This file is read automatically by the framework during the boot lifecycle
| and hence do not rename or move this file to a different location.
|
*/

import Env from '@ioc:Adonis/Core/Env'

export default Env.rules({
	HOST: Env.schema.string({ format: 'host' }),
	PORT: Env.schema.number(),
	APP_KEY: Env.schema.string(),
	APP_NAME: Env.schema.string(),
	CACHE_VIEWS: Env.schema.boolean(),
	SESSION_DRIVER: Env.schema.string(),
  DRIVE_DISK: Env.schema.enum(['local'] as const),
	NODE_ENV: Env.schema.enum(['development', 'production', 'test'] as const),
})


## .env.example

PORT=3333
HOST=0.0.0.0
NODE_ENV=development
APP_KEY=Ksl8UwT0GmUe1MMe83SlhR9ip2twA4tf
DRIVE_DISK=local
SESSION_DRIVER=cookie
CACHE_VIEWS=false
DB_CONNECTION=sqlite
PG_HOST=127.0.0.1
PG_PORT=5432
PG_USER=lucid
PG_PASSWORD=
PG_DB_NAME=lucid



# CONTROLEURS
#
## app/Controllers/Http/RegistrationsController.ts

// app/Controllers/Http/RegistrationsController.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import User from 'App/Models/User'
import Hash from '@ioc:Adonis/Core/Hash'

/**
 * Contrôleur d'inscription (register)
 */
export default class RegistrationsController {
	/**
	 * Affiche le formulaire d'inscription
	 */
	public async showRegisterForm({ view }: HttpContextContract) {
		return view.render('registrations/register')
	}

	/**
	 * Création du compte utilisateur
	 */
	public async register({ request, response, session, auth }: HttpContextContract) {
		const data = request.only(['name', 'email', 'password'])
		const utilisateur = new User()
		utilisateur.name = data.name
		utilisateur.email = data.email
		utilisateur.password = await Hash.make(data.password)
		await utilisateur.save()
		await auth.login(utilisateur)
		session.flash({ notification: 'Compte créé.' })
		return response.redirect().toRoute('plants.index')
	}
}


## app/Controllers/Http/OrdersController.ts

// app/Controllers/Http/OrdersController.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import Database from '@ioc:Adonis/Lucid/Database'
import Order from 'App/Models/Order'
import Plant from 'App/Models/Plant'
import OrderItem from 'App/Models/OrderItem'

/**
 * Contrôleur des commandes
 */
export default class OrdersController {
	/**
	 * Liste des commandes utilisateur
	 */
	public async index({ auth, view }: HttpContextContract) {
		const commandes = await Order.query()
			.where('user_id', auth.user!.id)
			.preload('orderItems', (query) => query.preload('plant'))
			.orderBy('created_at', 'desc')
		return view.render('orders/index', { commandes })
	}

	/**
	 * Page de confirmation commande (panier, logique JS côté client)
	 */
	public async new({ view }: HttpContextContract) {
		return view.render('orders/new')
	}

	/**
	 * Création de la commande (vérif stock, MAJ, gestion transaction)
	 */
	public async create({ request, auth, response, session }: HttpContextContract) {
		const items = JSON.parse(request.input('order.items', '[]'))
		let total = 0

		const trx = await Database.transaction()
		try {
			const commande = await Order.create({
				userId: auth.user!.id,
				status: 'confirmed',
				totalPrice: 0
			}, { client: trx })

			for (const item of items) {
				const plante = await Plant.findOrFail(item.plant_id, { client: trx })
				const quantite = parseInt(item.quantity)
				if (plante.stock < quantite) {
					throw new Error(`Stock insuffisant pour ${plante.name}`)
				}
				total += plante.price * quantite
				plante.stock -= quantite
				await plante.save({ client: trx })
				await OrderItem.create({
					orderId: commande.id,
					plantId: plante.id,
					quantity: quantite
				}, { client: trx })
			}
			commande.totalPrice = total
			await commande.save()
			await trx.commit()

			session.flash({ notification: 'Commande confirmée.' })
			return response.redirect().toRoute('orders.index')
		} catch (erreur) {
			await trx.rollback()
			session.flash({ error: erreur.message || "Erreur lors de la commande." })
			return response.redirect().toRoute('orders.new')
		}
	}
}


## app/Controllers/Http/Admin/UsersController.ts

// app/Controllers/Http/Admin/UsersController.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import User from 'App/Models/User'

/**
 * Contrôleur d’administration des utilisateurs
 */
export default class UsersController {
	/**
	 * Liste tous les utilisateurs
	 */
	public async index({ view }: HttpContextContract) {
		const utilisateurs = await User.query().orderBy('admin', 'desc').orderBy('name', 'asc')
		return view.render('admin/users/index', { utilisateurs: utilisateurs })
	}

	/**
	 * Affiche le détail d’un utilisateur
	 */
	public async show({ params, view }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		return view.render('admin/users/show', { utilisateur })
	}

	/**
	 * Formulaire édition utilisateur
	 */
	public async edit({ params, view }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		return view.render('admin/users/edit', { utilisateur })
	}

	/**
	 * MAJ utilisateur
	 */
	public async update({ params, request, response, session }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		utilisateur.merge(request.only(['name', 'email', 'admin']))
		await utilisateur.save()
		session.flash({ notification: 'Utilisateur mis à jour.' })
		return response.redirect().toRoute('admin.users.index')
	}

	/**
	 * Suppression utilisateur
	 */
	public async destroy({ params, response, session }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		await utilisateur.delete()
		session.flash({ notification: 'Utilisateur supprimé.' })
		return response.redirect().toRoute('admin.users.index')
	}
}


## app/Controllers/Http/Admin/PlantsController.ts

// app/Controllers/Http/Admin/PlantsController.ts

import type { HttpContextContract } from "@ioc:Adonis/Core/HttpContext";
import Plant from "App/Models/Plant";

/**
 * Contrôleur d’administration des plantes
 */
export default class PlantsController {
  /**
   * Liste toutes les plantes (admin)
   */
  public async index({ view }: HttpContextContract) {
    const plantes = await Plant.querySortedByName();
    return view.render("admin/plants/index", { plantes: plantes });
  }

  /**
   * Formulaire création plante
   */
  public async create({ view }: HttpContextContract) {
    return view.render("admin/plants/create");
  }

  /**
   * Création plante
   */
  public async store({ request, response, session }: HttpContextContract) {
    const data = request.only(["name", "price", "description", "stock"]);
    await Plant.create(data);
    session.flash({ notification: "Plante créée." });
    return response.redirect().toRoute("admin.plants.index");
  }

  /**
   * Formulaire édition plante
   */
  public async edit({ params, view }: HttpContextContract) {
    const plante = await Plant.findOrFail(params.id);
    return view.render("admin/plants/edit", { plante });
  }

  /**
   * MAJ plante
   */
  public async update({
    params,
    request,
    response,
    session,
  }: HttpContextContract) {
    const plante = await Plant.findOrFail(params.id);
    plante.merge(request.only(["name", "price", "description", "stock"]));
    await plante.save();
    session.flash({ notification: "Plante modifiée." });
    return response.redirect().toRoute("admin.plants.index");
  }

  /**
   * Suppression plante
   */
  public async destroy({ params, response, session }: HttpContextContract) {
    const plante = await Plant.findOrFail(params.id);
    await plante.delete();
    session.flash({ notification: "Plante supprimée." });
    return response.redirect().toRoute("admin.plants.index");
  }
}


## app/Controllers/Http/SessionsController.ts

// app/Controllers/Http/SessionsController.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import User from 'App/Models/User'
import Hash from '@ioc:Adonis/Core/Hash'

/**
 * Contrôleur de session (login/logout)
 */
export default class SessionsController {
	/**
	 * Affiche le formulaire de connexion
	 */
	public async showLoginForm({ view }: HttpContextContract) {
		return view.render('sessions/login')
	}

	/**
	 * Connexion utilisateur
	 */
	public async login({ request, response, auth, session }: HttpContextContract) {
		const { email, password } = request.only(['email', 'password'])
		const user = await User.query().where('email', email).first()
		if (!user || !(await Hash.verify(user.password, password))) {
			session.flash({ error: 'Identifiants invalides.' })
			return response.redirect().toRoute('login.perform')
		}
		await auth.login(user)
		return response.redirect().toRoute('plants.index')
	}

	/**
	 * Déconnexion
	 */
	public async logout({ auth, response }: HttpContextContract) {
		await auth.logout()
		return response.redirect().toRoute('home')
	}
}


## app/Controllers/Http/CartsController.ts

// app/Controllers/Http/CartsController.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'

/**
 * Contrôleur du panier (affichage seulement, logique JS côté client)
 */
export default class CartsController {
	/**
	 * Affiche la page panier
	 */
	public async index({ view }: HttpContextContract) {
		return view.render('carts/index')
	}
}


## app/Controllers/Http/UsersController.ts

// app/Controllers/Http/UsersController.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'
import User from 'App/Models/User'

/**
 * Contrôleur des utilisateurs (profil personnel)
 */
export default class UsersController {
	/**
	 * Affiche le profil utilisateur
	 */
	public async show({ params, auth, response, view }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		// Autorisation : à adapter selon votre logique
		if (auth.user?.id !== utilisateur.id) {
			return response.unauthorized('Accès interdit.')
		}
		return view.render('users/show', { utilisateur })
	}

	/**
	 * Formulaire édition profil utilisateur
	 */
	public async edit({ params, auth, response, view }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		if (auth.user?.id !== utilisateur.id) {
			return response.unauthorized('Accès interdit.')
		}
		return view.render('users/edit', { utilisateur })
	}

	/**
	 * Met à jour le profil utilisateur
	 */
	public async update({ params, request, auth, response, session }: HttpContextContract) {
		const utilisateur = await User.findOrFail(params.id)
		if (auth.user?.id !== utilisateur.id) {
			return response.unauthorized('Accès interdit.')
		}
		utilisateur.merge(request.only(['name', 'email']))
		await utilisateur.save()
		session.flash({ notification: 'Profil mis à jour.' })
		return response.redirect().toRoute('users.show', { id: utilisateur.id })
	}
}


## app/Controllers/Http/PlantsController.ts

// app/Controllers/Http/PlantsController.ts

import type { HttpContextContract } from "@ioc:Adonis/Core/HttpContext";
import Plant from "App/Models/Plant";

/**
 * Contrôleur public des plantes
 */
export default class PlantsController {
  /**
   * Liste des plantes en stock (stock >= 1)
   */
  public async index({ view }: HttpContextContract) {
    const plants = await Plant.querySortedByName().where("stock", ">=", 1);
    return view.render("plants/index", { plants });
  }

  /**
   * Affiche une plante
   */
  public async show({ params, view }: HttpContextContract) {
    const plant = await Plant.findOrFail(params.id);
    return view.render("plants/show", { plant });
  }
}



# MODELES
#
## app/Models/User.ts

import { DateTime } from 'luxon'
import { BaseModel, column, hasMany, HasMany } from '@ioc:Adonis/Lucid/Orm'
import Order from './Order'

export default class User extends BaseModel {
	@column({ isPrimary: true })
	public id: number

	@column()
	public email: string

	@column()
	public password: string

	@column()
	public admin: boolean

	@column()
	public name: string

	@column.dateTime({ autoCreate: true })
	public createdAt: DateTime

	@column.dateTime({ autoCreate: true, autoUpdate: true })
	public updatedAt: DateTime

	@hasMany(() => Order)
	public orders: HasMany<typeof Order>
}


## app/Models/Order.ts

import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo, BelongsTo, hasMany, HasMany } from '@ioc:Adonis/Lucid/Orm'
import User from './User'
import OrderItem from './OrderItem'

export default class Order extends BaseModel {
	@column({ isPrimary: true })
	public id: number

	@column()
	public userId: number

	@column()
	public totalPrice: number

	@column()
	public status: string

	@column.dateTime({ autoCreate: true })
	public createdAt: DateTime

	@column.dateTime({ autoCreate: true, autoUpdate: true })
	public updatedAt: DateTime

	@belongsTo(() => User)
	public user: BelongsTo<typeof User>

	@hasMany(() => OrderItem)
	public orderItems: HasMany<typeof OrderItem>
}


## app/Models/OrderItem.ts

import { DateTime } from 'luxon'
import { BaseModel, column, belongsTo, BelongsTo } from '@ioc:Adonis/Lucid/Orm'
import Order from './Order'
import Plant from './Plant'

export default class OrderItem extends BaseModel {
	@column({ isPrimary: true })
	public id: number

	@column()
	public orderId: number

	@column()
	public plantId: number

	@column()
	public quantity: number

	@column.dateTime({ autoCreate: true })
	public createdAt: DateTime

	@column.dateTime({ autoCreate: true, autoUpdate: true })
	public updatedAt: DateTime

	@belongsTo(() => Order)
	public order: BelongsTo<typeof Order>

	@belongsTo(() => Plant)
	public plant: BelongsTo<typeof Plant>
}


## app/Models/Plant.ts

import { DateTime } from "luxon";
import { BaseModel, column, hasMany, HasMany } from "@ioc:Adonis/Lucid/Orm";
import OrderItem from "./OrderItem";

export default class Plant extends BaseModel {
  @column({ isPrimary: true })
  public id: number;

  @column()
  public name: string;

  @column()
  public price: number;

  @column()
  public description: string;

  @column()
  public stock: number;

  @column.dateTime({ autoCreate: true })
  public createdAt: DateTime;

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  public updatedAt: DateTime;

  @hasMany(() => OrderItem)
  public orderItems: HasMany<typeof OrderItem>;

  /**
   * Retourne une requête triée insensible à la casse
   * Compatible avec SQLite et PostgreSQL
   */
  public static querySortedByName() {
    const dbClient = process.env.DB_CONNECTION;

    if (dbClient === "sqlite") {
      return this.query().orderByRaw("LOWER(name) COLLATE NOCASE");
    } else if (dbClient === "pg") { // Base de données postgre
      return this.query().orderByRaw("LOWER(name) ASC");
    } else {
      return this.query().orderBy("name", "asc");
    }
  }
}



# ROUTES
#
## start/routes.ts

/**
 * start/routes.ts
 *
 * Here you can register HTTP routes for your application.
 * While building, ensure you include the import below.
 */

import Route from '@ioc:Adonis/Core/Route'

/*
|--------------------------------------------------------------------------
| Routes
|--------------------------------------------------------------------------
*/

// Authentification
Route.get('/login', 'SessionsController.showLoginForm').as('login.show')
Route.post('/login', 'SessionsController.login').as('login.perform')
Route.post('/logout', 'SessionsController.logout').as('logout')

// Inscription
Route.get('/register', 'RegistrationsController.showRegisterForm').as('register.show')
Route.post('/register', 'RegistrationsController.register').as('register.perform')

// Plantes (public)
Route.resource('plants', 'PlantsController').only(['index', 'show'])

// Page d'accueil
Route.get('/', 'PlantsController.index').as('home')

// Routes nécessitant une authentification
Route.group(() => {
  // Profil personnel
  Route.resource('users', 'UsersController').only(['show', 'edit'])

	// Route Post pour update
	Route.post('/users/:id/update', 'UsersController.update').as('users.update')

  // Panier
  Route.resource('carts', 'CartsController').only(['index'])

  // Commandes - Routes explicites pour éviter les conflits
  Route.get('/orders', 'OrdersController.index').as('orders.index')
  Route.get('/orders/new', 'OrdersController.new').as('orders.new')
  Route.post('/orders', 'OrdersController.create').as('orders.create')
}).middleware('auth')

// Administration
Route.group(() => {
  // Plantes
  Route.resource('plants', 'Admin/PlantsController').except(['show', 'destroy', 'update'])

	// Route POST pour modification utilisateurs (update)
  Route.post('/users/:id/update', 'Admin/PlantsController.update').as('plants.update')

  // Route POST pour suppression plantes
  Route.post('/plants/:id/delete', 'Admin/PlantsController.destroy')
    .as('plants.destroy')

  // Utilisateurs
  Route.resource('users', 'Admin/UsersController').only(['index', 'show', 'edit'])

	// Route POST pour modification utilisateurs (update)
  Route.post('/users/:id/admin_update', 'Admin/UsersController.update').as('users.update')

  // Route POST pour suppression utilisateurs
  Route.post('/users/:id/delete', 'Admin/UsersController.destroy')
    .as('users.destroy')
})
  .prefix('admin')
  .as('admin')
  .middleware('auth')


## start/kernel.ts

/*
|--------------------------------------------------------------------------
| Application middleware
|--------------------------------------------------------------------------
|
| This file is used to define middleware for HTTP requests. You can register
| middleware as a `closure` or an IoC container binding. The bindings are
| preferred, since they keep this file clean.
|
*/

import Server from '@ioc:Adonis/Core/Server'

/*
|--------------------------------------------------------------------------
| Global middleware
|--------------------------------------------------------------------------
|
| An array of global middleware, that will be executed in the order they
| are defined for every HTTP requests.
|
*/
Server.middleware.register([
	() => import('@ioc:Adonis/Core/BodyParser'),
	() => import('@ioc:Adonis/Addons/Shield'),
	() => import('App/Middleware/SilentAuth'),
])


/*
|--------------------------------------------------------------------------
| Named middleware
|--------------------------------------------------------------------------
|
| Named middleware are defined as key-value pair. The value is the namespace
| or middleware function and key is the alias. Later you can use these
| alias on individual routes. For example:
|
| { auth: () => import('App/Middleware/Auth') }
|
| and then use it as follows
|
| Route.get('dashboard', 'UserController.dashboard').middleware('auth')
|
*/
Server.middleware.registerNamed({
  auth: () => import('App/Middleware/Auth'),
  silentAuth: () => import('App/Middleware/SilentAuth'),
})



# CONFIG
#
## config/drive.ts

/**
 * Config source: https://git.io/JBt3o
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import Env from '@ioc:Adonis/Core/Env'
import { driveConfig } from '@adonisjs/core/build/config'
import Application from '@ioc:Adonis/Core/Application'

/*
|--------------------------------------------------------------------------
| Drive Config
|--------------------------------------------------------------------------
|
| The `DriveConfig` relies on the `DisksList` interface which is
| defined inside the `contracts` directory.
|
*/
export default driveConfig({
  /*
  |--------------------------------------------------------------------------
  | Default disk
  |--------------------------------------------------------------------------
  |
  | The default disk to use for managing file uploads. The value is driven by
  | the `DRIVE_DISK` environment variable.
  |
  */
  disk: Env.get('DRIVE_DISK'),

  disks: {
    /*
    |--------------------------------------------------------------------------
    | Local
    |--------------------------------------------------------------------------
    |
    | Uses the local file system to manage files. Make sure to turn off serving
    | files when not using this disk.
    |
    */
    local: {
      driver: 'local',
      visibility: 'public',

      /*
      |--------------------------------------------------------------------------
      | Storage root - Local driver only
      |--------------------------------------------------------------------------
      |
      | Define an absolute path to the storage directory from where to read the
      | files.
      |
      */
      root: Application.tmpPath('uploads'),

      /*
      |--------------------------------------------------------------------------
      | Serve files - Local driver only
      |--------------------------------------------------------------------------
      |
      | When this is set to true, AdonisJS will configure a files server to serve
      | files from the disk root. This is done to mimic the behavior of cloud
      | storage services that has inbuilt capabilities to serve files.
      |
      */
      serveFiles: true,

      /*
      |--------------------------------------------------------------------------
      | Base path - Local driver only
      |--------------------------------------------------------------------------
      |
      | Base path is always required when "serveFiles = true". Also make sure
      | the `basePath` is unique across all the disks using "local" driver and
      | you are not registering routes with this prefix.
      |
      */
      basePath: '/uploads',
    },

    /*
    |--------------------------------------------------------------------------
    | S3 Driver
    |--------------------------------------------------------------------------
    |
    | Uses the S3 cloud storage to manage files. Make sure to install the s3
    | drive separately when using it.
    |
    |**************************************************************************
    | npm i @adonisjs/drive-s3
    |**************************************************************************
    |
    */
    // s3: {
    //   driver: 's3',
    //   visibility: 'public',
    //   key: Env.get('S3_KEY'),
    //   secret: Env.get('S3_SECRET'),
    //   region: Env.get('S3_REGION'),
    //   bucket: Env.get('S3_BUCKET'),
    //   endpoint: Env.get('S3_ENDPOINT'),
    //
    //  // For minio to work
    //  // forcePathStyle: true,
    // },

    /*
    |--------------------------------------------------------------------------
    | GCS Driver
    |--------------------------------------------------------------------------
    |
    | Uses the Google cloud storage to manage files. Make sure to install the GCS
    | drive separately when using it.
    |
    |**************************************************************************
    | npm i @adonisjs/drive-gcs
    |**************************************************************************
    |
    */
    // gcs: {
    //   driver: 'gcs',
    //   visibility: 'public',
    //   keyFilename: Env.get('GCS_KEY_FILENAME'),
    //   bucket: Env.get('GCS_BUCKET'),

      /*
      |--------------------------------------------------------------------------
      | Uniform ACL - Google cloud storage only
      |--------------------------------------------------------------------------
      |
      | When using the Uniform ACL on the bucket, the "visibility" option is
      | ignored. Since, the files ACL is managed by the google bucket policies
      | directly.
      |
      |**************************************************************************
      | Learn more: https://cloud.google.com/storage/docs/uniform-bucket-level-access
      |**************************************************************************
      |
      | The following option just informs drive whether your bucket is using uniform
      | ACL or not. The actual setting needs to be toggled within the Google cloud
      | console.
      |
      */
    //   usingUniformAcl: false,
    // },
  },
})


## config/auth.ts

/**
 * Config source: https://git.io/JY0mp
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import type { AuthConfig } from '@ioc:Adonis/Addons/Auth'

/*
|--------------------------------------------------------------------------
| Authentication Mapping
|--------------------------------------------------------------------------
|
| List of available authentication mapping. You must first define them
| inside the `contracts/auth.ts` file before mentioning them here.
|
*/
const authConfig: AuthConfig = {
  guard: 'web',
  guards: {
    /*
    |--------------------------------------------------------------------------
    | Web Guard
    |--------------------------------------------------------------------------
    |
    | Web guard uses classic old school sessions for authenticating users.
    | If you are building a standard web application, it is recommended to
    | use web guard with session driver
    |
    */
    web: {
      driver: 'session',

      provider: {
        /*
        |--------------------------------------------------------------------------
        | Driver
        |--------------------------------------------------------------------------
        |
        | Name of the driver
        |
        */
        driver: 'lucid',

        /*
        |--------------------------------------------------------------------------
        | Identifier key
        |--------------------------------------------------------------------------
        |
        | The identifier key is the unique key on the model. In most cases specifying
        | the primary key is the right choice.
        |
        */
        identifierKey: 'id',

        /*
        |--------------------------------------------------------------------------
        | Uids
        |--------------------------------------------------------------------------
        |
        | Uids are used to search a user against one of the mentioned columns. During
        | login, the auth module will search the user mentioned value against one
        | of the mentioned columns to find their user record.
        |
        */
        uids: ['email'],

        /*
        |--------------------------------------------------------------------------
        | Model
        |--------------------------------------------------------------------------
        |
        | The model to use for fetching or finding users. The model is imported
        | lazily since the config files are read way earlier in the lifecycle
        | of booting the app and the models may not be in a usable state at
        | that time.
        |
        */
        model: () => import('App/Models/User'),
      },
    },
  },
}

export default authConfig


## config/cors.ts

/**
 * Config source: https://git.io/JfefC
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import type { CorsConfig } from '@ioc:Adonis/Core/Cors'

const corsConfig: CorsConfig = {
  /*
  |--------------------------------------------------------------------------
  | Enabled
  |--------------------------------------------------------------------------
  |
  | A boolean to enable or disable CORS integration from your AdonisJs
  | application.
  |
  | Setting the value to `true` will enable the CORS for all HTTP request. However,
  | you can define a function to enable/disable it on per request basis as well.
  |
  */
  enabled: false,

  // You can also use a function that return true or false.
  // enabled: (request) => request.url().startsWith('/api')

  /*
  |--------------------------------------------------------------------------
  | Origin
  |--------------------------------------------------------------------------
  |
  | Set a list of origins to be allowed for `Access-Control-Allow-Origin`.
  | The value can be one of the following:
  |
  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
  |
  | Boolean (true)    - Allow current request origin.
  | Boolean (false)   - Disallow all.
  | String            - Comma separated list of allowed origins.
  | Array             - An array of allowed origins.
  | String (*)        - A wildcard (*) to allow all request origins.
  | Function          - Receives the current origin string and should return
  |                     one of the above values.
  |
  */
  origin: true,

  /*
  |--------------------------------------------------------------------------
  | Methods
  |--------------------------------------------------------------------------
  |
  | An array of allowed HTTP methods for CORS. The `Access-Control-Request-Method`
  | is checked against the following list.
  |
  | Following is the list of default methods. Feel free to add more.
  */
  methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE'],

  /*
  |--------------------------------------------------------------------------
  | Headers
  |--------------------------------------------------------------------------
  |
  | List of headers to be allowed for `Access-Control-Allow-Headers` header.
  | The value can be one of the following:
  |
  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Headers
  |
  | Boolean(true)     - Allow all headers mentioned in `Access-Control-Request-Headers`.
  | Boolean(false)    - Disallow all headers.
  | String            - Comma separated list of allowed headers.
  | Array             - An array of allowed headers.
  | Function          - Receives the current header and should return one of the above values.
  |
  */
  headers: true,

  /*
  |--------------------------------------------------------------------------
  | Expose Headers
  |--------------------------------------------------------------------------
  |
  | A list of headers to be exposed by setting `Access-Control-Expose-Headers`.
  | header. By default following 6 simple response headers are exposed.
  |
  | Cache-Control
  | Content-Language
  | Content-Type
  | Expires
  | Last-Modified
  | Pragma
  |
  | In order to add more headers, simply define them inside the following array.
  |
  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers
  |
  */
  exposeHeaders: [
    'cache-control',
    'content-language',
    'content-type',
    'expires',
    'last-modified',
    'pragma',
  ],

  /*
  |--------------------------------------------------------------------------
  | Credentials
  |--------------------------------------------------------------------------
  |
  | Toggle `Access-Control-Allow-Credentials` header. If value is set to `true`,
  | then header will be set, otherwise not.
  |
  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials
  |
  */
  credentials: true,

  /*
  |--------------------------------------------------------------------------
  | MaxAge
  |--------------------------------------------------------------------------
  |
  | Define `Access-Control-Max-Age` header in seconds.
  | https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age
  |
  */
  maxAge: 90,
}

export default corsConfig


## config/shield.ts

/**
 * Config source: https://git.io/Jvwvt
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import { ShieldConfig } from '@ioc:Adonis/Addons/Shield'

/*
|--------------------------------------------------------------------------
| Content Security Policy
|--------------------------------------------------------------------------
|
| Content security policy filters out the origins not allowed to execute
| and load resources like scripts, styles and fonts. There are wide
| variety of options to choose from.
*/
export const csp: ShieldConfig['csp'] = {
  /*
  |--------------------------------------------------------------------------
  | Enable/disable CSP
  |--------------------------------------------------------------------------
  |
  | The CSP rules are disabled by default for seamless onboarding.
  |
  */
  enabled: false,

  /*
  |--------------------------------------------------------------------------
  | Directives
  |--------------------------------------------------------------------------
  |
  | All directives are defined in camelCase and here is the list of
  | available directives and their possible values.
  |
  | https://content-security-policy.com
  |
  | @example
  | directives: {
  |   defaultSrc: ["'self'", '@nonce', 'cdnjs.cloudflare.com']
  | }
  |
  */
  directives: {
  },

  /*
  |--------------------------------------------------------------------------
  | Report only
  |--------------------------------------------------------------------------
  |
  | Setting `reportOnly=true` will not block the scripts from running and
  | instead report them to a URL.
  |
  */
  reportOnly: false,
}

/*
|--------------------------------------------------------------------------
| CSRF Protection
|--------------------------------------------------------------------------
|
| CSRF Protection adds another layer of security by making sure, actionable
| routes does have a valid token to execute an action.
|
*/
export const csrf: ShieldConfig['csrf'] = {
  /*
  |--------------------------------------------------------------------------
  | Enable/Disable CSRF
  |--------------------------------------------------------------------------
  */
  enabled: true,

  /*
  |--------------------------------------------------------------------------
  | Routes to Ignore
  |--------------------------------------------------------------------------
  |
  | Define an array of route patterns that you want to ignore from CSRF
  | validation. Make sure the route patterns are started with a leading
  | slash. Example:
  |
  | `/foo/bar`
	|
	| Also you can define a function that is evaluated on every HTTP Request.
	| ```
	|  exceptRoutes: ({ request }) => request.url().includes('/api')
	| ```
  |
  */
  exceptRoutes: [],

  /*
  |--------------------------------------------------------------------------
  | Enable Sharing Token Via Cookie
  |--------------------------------------------------------------------------
  |
  | When the following flag is enabled, AdonisJS will drop `XSRF-TOKEN`
  | cookie that frontend frameworks can read and return back as a
  | `X-XSRF-TOKEN` header.
  |
  | The cookie has `httpOnly` flag set to false, so it is little insecure and
  | can be turned off when you are not using a frontend framework making
  | AJAX requests.
  |
  */
  enableXsrfCookie: true,

  /*
  |--------------------------------------------------------------------------
  | Methods to Validate
  |--------------------------------------------------------------------------
  |
  | Define an array of HTTP methods to be validated for a valid CSRF token.
  |
  */
  methods: ['POST', 'PUT', 'PATCH', 'DELETE'],
}

/*
|--------------------------------------------------------------------------
| DNS Prefetching
|--------------------------------------------------------------------------
|
| DNS prefetching allows browsers to proactively perform domain name
| resolution in background.
|
| Learn more at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control
|
*/
export const dnsPrefetch: ShieldConfig['dnsPrefetch'] = {
  /*
  |--------------------------------------------------------------------------
  | Enable/disable this feature
  |--------------------------------------------------------------------------
  */
  enabled: true,

  /*
  |--------------------------------------------------------------------------
  | Allow or Dis-Allow Explicitly
  |--------------------------------------------------------------------------
  |
  | The `enabled` boolean does not set `X-DNS-Prefetch-Control` header. However
  | the `allow` boolean controls the value of `X-DNS-Prefetch-Control` header.
  |
  | - When `allow = true`, then `X-DNS-Prefetch-Control = 'on'`
  | - When `allow = false`, then `X-DNS-Prefetch-Control = 'off'`
  |
  */
  allow: true,
}

/*
|--------------------------------------------------------------------------
| Iframe Options
|--------------------------------------------------------------------------
|
| xFrame defines whether or not your website can be embedded inside an
| iframe. Choose from one of the following options.
|
| - DENY
| - SAMEORIGIN
| - ALLOW-FROM http://example.com
|
| Learn more at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
*/
export const xFrame: ShieldConfig['xFrame'] = {
  enabled: true,
  action: 'DENY',
}

/*
|--------------------------------------------------------------------------
| Http Strict Transport Security
|--------------------------------------------------------------------------
|
| A security to ensure that a browser always makes a connection over
| HTTPS.
|
| Learn more at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
|
*/
export const hsts: ShieldConfig['hsts'] = {
  enabled: true,
  /*
  |--------------------------------------------------------------------------
  | Max Age
  |--------------------------------------------------------------------------
  |
  | Control, how long the browser should remember that a site is only to be
  | accessed using HTTPS.
  |
  */
  maxAge: '180 days',

  /*
  |--------------------------------------------------------------------------
  | Include Subdomains
  |--------------------------------------------------------------------------
  |
  | Apply rules on the subdomains as well.
  |
  */
  includeSubDomains: true,

  /*
  |--------------------------------------------------------------------------
  | Preloading
  |--------------------------------------------------------------------------
  |
  | Google maintains a service to register your domain and it will preload
  | the HSTS policy. Learn more https://hstspreload.org/
  |
  */
  preload: false,
}

/*
|--------------------------------------------------------------------------
| No Sniff
|--------------------------------------------------------------------------
|
| Browsers have a habit of sniffing content-type of a response. Which means
| files with .txt extension containing Javascript code will be executed as
| Javascript. You can disable this behavior by setting nosniff to false.
|
| Learn more at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
|
*/
export const contentTypeSniffing: ShieldConfig['contentTypeSniffing'] = {
  enabled: true,
}


## config/hash.ts

/**
 * Config source: https://git.io/JfefW
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import Env from '@ioc:Adonis/Core/Env'
import { hashConfig } from '@adonisjs/core/build/config'

/*
|--------------------------------------------------------------------------
| Hash Config
|--------------------------------------------------------------------------
|
| The `HashConfig` relies on the `HashList` interface which is
| defined inside `contracts` directory.
|
*/
export default hashConfig({
  /*
  |--------------------------------------------------------------------------
  | Default hasher
  |--------------------------------------------------------------------------
  |
  | By default we make use of the argon hasher to hash values. However, feel
  | free to change the default value
  |
  */
  default: Env.get('HASH_DRIVER', 'scrypt'),

  list: {
    /*
    |--------------------------------------------------------------------------
    | scrypt
    |--------------------------------------------------------------------------
    |
    | Scrypt mapping uses the Node.js inbuilt crypto module for creating
    | hashes.
    |
    | We are using the default configuration recommended within the Node.js
    | documentation.
    | https://nodejs.org/api/crypto.html#cryptoscryptpassword-salt-keylen-options-callback
    |
    */
    scrypt: {
      driver: 'scrypt',
      cost: 16384,
      blockSize: 8,
      parallelization: 1,
      saltSize: 16,
      keyLength: 64,
      maxMemory: 32 * 1024 * 1024,
    },

    /*
    |--------------------------------------------------------------------------
    | Argon
    |--------------------------------------------------------------------------
    |
    | Argon mapping uses the `argon2` driver to hash values.
    |
    | Make sure you install the underlying dependency for this driver to work.
    | https://www.npmjs.com/package/phc-argon2.
    |
    | npm install phc-argon2
    |
    */
    argon: {
      driver: 'argon2',
      variant: 'id',
      iterations: 3,
      memory: 4096,
      parallelism: 1,
      saltSize: 16,
    },

    /*
    |--------------------------------------------------------------------------
    | Bcrypt
    |--------------------------------------------------------------------------
    |
    | Bcrypt mapping uses the `bcrypt` driver to hash values.
    |
    | Make sure you install the underlying dependency for this driver to work.
    | https://www.npmjs.com/package/phc-bcrypt.
    |
    | npm install phc-bcrypt
    |
    */
    bcrypt: {
      driver: 'bcrypt',
      rounds: 10,
    },
  },
})


## config/session.ts

/**
 * Config source: https://git.io/JeYHp
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import Env from '@ioc:Adonis/Core/Env'
import Application from '@ioc:Adonis/Core/Application'
import { sessionConfig } from '@adonisjs/session/build/config'

export default sessionConfig({
  /*
  |--------------------------------------------------------------------------
  | Enable/Disable sessions
  |--------------------------------------------------------------------------
  |
  | Setting the following property to "false" will disable the session for the
  | entire application
  |
  */
  enabled: true,

  /*
  |--------------------------------------------------------------------------
  | Driver
  |--------------------------------------------------------------------------
  |
  | The session driver to use. You can choose between one of the following
  | drivers.
  |
  | - cookie (Uses signed cookies to store session values)
  | - file (Uses filesystem to store session values)
  | - redis (Uses redis. Make sure to install "@adonisjs/redis" as well)
  |
  | Note: Switching drivers will make existing sessions invalid.
  |
  */
  driver: Env.get('SESSION_DRIVER'),

  /*
  |--------------------------------------------------------------------------
  | Cookie name
  |--------------------------------------------------------------------------
  |
  | The name of the cookie that will hold the session id.
  |
  */
  cookieName: 'adonis-session',

  /*
  |--------------------------------------------------------------------------
  | Clear session when browser closes
  |--------------------------------------------------------------------------
  |
  | Whether or not you want to destroy the session when browser closes. Setting
  | this value to `true` will ignore the `age`.
  |
  */
  clearWithBrowser: false,

  /*
  |--------------------------------------------------------------------------
  | Session age
  |--------------------------------------------------------------------------
  |
  | The duration for which session stays active after no activity. A new HTTP
  | request to the server is considered as activity.
  |
  | The value can be a number in milliseconds or a string that must be valid
  | as per https://npmjs.org/package/ms package.
  |
  | Example: `2 days`, `2.5 hrs`, `1y`, `5s` and so on.
  |
  */
  age: '2h',

  /*
  |--------------------------------------------------------------------------
  | Cookie values
  |--------------------------------------------------------------------------
  |
  | The cookie settings are used to setup the session id cookie and also the
  | driver will use the same values.
  |
  */
  cookie: {
    path: '/',
    httpOnly: true,
    sameSite: false,
  },

  /*
  |--------------------------------------------------------------------------
  | Configuration for the file driver
  |--------------------------------------------------------------------------
  |
  | The file driver needs absolute path to the directory in which sessions
  | must be stored.
  |
  */
  file: {
    location: Application.tmpPath('sessions'),
  },

  /*
  |--------------------------------------------------------------------------
  | Redis driver
  |--------------------------------------------------------------------------
  |
  | The redis connection you want session driver to use. The same connection
  | must be defined inside `config/redis.ts` file as well.
  |
  */
  redisConnection: 'local',
})


## config/app.ts

/**
 * Config source: https://git.io/JfefZ
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import proxyAddr from 'proxy-addr'
import Env from '@ioc:Adonis/Core/Env'
import type { ServerConfig } from '@ioc:Adonis/Core/Server'
import type { LoggerConfig } from '@ioc:Adonis/Core/Logger'
import type { ProfilerConfig } from '@ioc:Adonis/Core/Profiler'
import type { ValidatorConfig } from '@ioc:Adonis/Core/Validator'

/*
|--------------------------------------------------------------------------
| Application secret key
|--------------------------------------------------------------------------
|
| The secret to encrypt and sign different values in your application.
| Make sure to keep the `APP_KEY` as an environment variable and secure.
|
| Note: Changing the application key for an existing app will make all
| the cookies invalid and also the existing encrypted data will not
| be decrypted.
|
*/
export const appKey: string = Env.get('APP_KEY')

/*
|--------------------------------------------------------------------------
| Http server configuration
|--------------------------------------------------------------------------
|
| The configuration for the HTTP(s) server. Make sure to go through all
| the config properties to make keep server secure.
|
*/
export const http: ServerConfig = {
  /*
  |--------------------------------------------------------------------------
  | Allow method spoofing
  |--------------------------------------------------------------------------
  |
  | Method spoofing enables defining custom HTTP methods using a query string
  | `_method`. This is usually required when you are making traditional
  | form requests and wants to use HTTP verbs like `PUT`, `DELETE` and
  | so on.
  |
  */
  allowMethodSpoofing: true,

  /*
  |--------------------------------------------------------------------------
  | Subdomain offset
  |--------------------------------------------------------------------------
  */
  subdomainOffset: 2,

  /*
  |--------------------------------------------------------------------------
  | Request Ids
  |--------------------------------------------------------------------------
  |
  | Setting this value to `true` will generate a unique request id for each
  | HTTP request and set it as `x-request-id` header.
  |
  */
  generateRequestId: false,

  /*
  |--------------------------------------------------------------------------
  | Trusting proxy servers
  |--------------------------------------------------------------------------
  |
  | Define the proxy servers that AdonisJs must trust for reading `X-Forwarded`
  | headers.
  |
  */
  trustProxy: proxyAddr.compile('loopback'),

  /*
  |--------------------------------------------------------------------------
  | Generating Etag
  |--------------------------------------------------------------------------
  |
  | Whether or not to generate an etag for every response.
  |
  */
  etag: false,

  /*
  |--------------------------------------------------------------------------
  | JSONP Callback
  |--------------------------------------------------------------------------
  */
  jsonpCallbackName: 'callback',

  /*
  |--------------------------------------------------------------------------
  | Cookie settings
  |--------------------------------------------------------------------------
  */
  cookie: {
    domain: '',
    path: '/',
    maxAge: '2h',
    httpOnly: true,
    secure: false,
    sameSite: false,
  },
}

/*
|--------------------------------------------------------------------------
| Logger
|--------------------------------------------------------------------------
*/
export const logger: LoggerConfig = {
  /*
  |--------------------------------------------------------------------------
  | Application name
  |--------------------------------------------------------------------------
  |
  | The name of the application you want to add to the log. It is recommended
  | to always have app name in every log line.
  |
  | The `APP_NAME` environment variable is automatically set by AdonisJS by
  | reading the `name` property from the `package.json` file.
  |
  */
  name: Env.get('APP_NAME'),

  /*
  |--------------------------------------------------------------------------
  | Toggle logger
  |--------------------------------------------------------------------------
  |
  | Enable or disable logger application wide
  |
  */
  enabled: true,

  /*
  |--------------------------------------------------------------------------
  | Logging level
  |--------------------------------------------------------------------------
  |
  | The level from which you want the logger to flush logs. It is recommended
  | to make use of the environment variable, so that you can define log levels
  | at deployment level and not code level.
  |
  */
  level: Env.get('LOG_LEVEL', 'info'),

  /*
  |--------------------------------------------------------------------------
  | Pretty print
  |--------------------------------------------------------------------------
  |
  | It is highly advised NOT to use `prettyPrint` in production, since it
  | can have huge impact on performance.
  |
  */
  prettyPrint: Env.get('NODE_ENV') === 'development',
}

/*
|--------------------------------------------------------------------------
| Profiler
|--------------------------------------------------------------------------
*/
export const profiler: ProfilerConfig = {
  /*
  |--------------------------------------------------------------------------
  | Toggle profiler
  |--------------------------------------------------------------------------
  |
  | Enable or disable profiler
  |
  */
  enabled: true,

  /*
  |--------------------------------------------------------------------------
  | Blacklist actions/row labels
  |--------------------------------------------------------------------------
  |
  | Define an array of actions or row labels that you want to disable from
  | getting profiled.
  |
  */
  blacklist: [],

  /*
  |--------------------------------------------------------------------------
  | Whitelist actions/row labels
  |--------------------------------------------------------------------------
  |
  | Define an array of actions or row labels that you want to whitelist for
  | the profiler. When whitelist is defined, then `blacklist` is ignored.
  |
  */
  whitelist: [],
}

/*
|--------------------------------------------------------------------------
| Validator
|--------------------------------------------------------------------------
|
| Configure the global configuration for the validator. Here's the reference
| to the default config https://git.io/JT0WE
|
*/
export const validator: ValidatorConfig = {
}


## config/bodyparser.ts

/**
 * Config source: https://git.io/Jfefn
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import type { BodyParserConfig } from '@ioc:Adonis/Core/BodyParser'

const bodyParserConfig: BodyParserConfig = {
  /*
  |--------------------------------------------------------------------------
  | White listed methods
  |--------------------------------------------------------------------------
  |
  | HTTP methods for which body parsing must be performed. It is a good practice
  | to avoid body parsing for `GET` requests.
  |
  */
  whitelistedMethods: ['POST', 'PUT', 'PATCH', 'DELETE'],
	  /*
  |--------------------------------------------------------------------------
  | Allow method spoofing
  |--------------------------------------------------------------------------
  |
  | Method spoofing enables defining custom HTTP methods using a query string
  | `_method`. This is usually required when you are making traditional
  | form requests and wants to use HTTP verbs like PUT, DELETE and
  | so on.
  |
  */
  allowMethodSpoofing: true,
  /*
  |--------------------------------------------------------------------------
  | JSON parser settings
  |--------------------------------------------------------------------------
  |
  | The settings for the JSON parser. The types defines the request content
  | types which gets processed by the JSON parser.
  |
  */
  json: {
    encoding: 'utf-8',
    limit: '1mb',
    strict: true,
    types: [
      'application/json',
      'application/json-patch+json',
      'application/vnd.api+json',
      'application/csp-report',
    ],
  },

  /*
  |--------------------------------------------------------------------------
  | Form parser settings
  |--------------------------------------------------------------------------
  |
  | The settings for the `application/x-www-form-urlencoded` parser. The types
  | defines the request content types which gets processed by the form parser.
  |
  */
  form: {
    encoding: 'utf-8',
    limit: '1mb',
    queryString: {},

    /*
    |--------------------------------------------------------------------------
    | Convert empty strings to null
    |--------------------------------------------------------------------------
    |
    | Convert empty form fields to null. HTML forms results in field string
    | value when the field is left blank. This option normalizes all the blank
    | field values to "null"
    |
    */
    convertEmptyStringsToNull: true,

    types: [
      'application/x-www-form-urlencoded',
    ],
  },

  /*
  |--------------------------------------------------------------------------
  | Raw body parser settings
  |--------------------------------------------------------------------------
  |
  | Raw body just reads the request body stream as a plain text, which you
  | can process by hand. This must be used when request body type is not
  | supported by the body parser.
  |
  */
  raw: {
    encoding: 'utf-8',
    limit: '1mb',
    queryString: {},
    types: [
      'text/*',
    ],
  },

  /*
  |--------------------------------------------------------------------------
  | Multipart parser settings
  |--------------------------------------------------------------------------
  |
  | The settings for the `multipart/form-data` parser. The types defines the
  | request content types which gets processed by the form parser.
  |
  */
  multipart: {
    /*
    |--------------------------------------------------------------------------
    | Auto process
    |--------------------------------------------------------------------------
    |
    | The auto process option will process uploaded files and writes them to
    | the `tmp` folder. You can turn it off and then manually use the stream
    | to pipe stream to a different destination.
    |
    | It is recommended to keep `autoProcess=true`. Unless you are processing bigger
    | file sizes.
    |
    */
    autoProcess: true,

    /*
    |--------------------------------------------------------------------------
    | Files to be processed manually
    |--------------------------------------------------------------------------
    |
    | You can turn off `autoProcess` for certain routes by defining
    | routes inside the following array.
    |
    | NOTE: Make sure the route pattern starts with a leading slash.
    |
    | Correct
    | ```js
    | /projects/:id/file
    | ```
    |
    | Incorrect
    | ```js
    | projects/:id/file
    | ```
    */
    processManually: [],

    /*
    |--------------------------------------------------------------------------
    | Temporary file name
    |--------------------------------------------------------------------------
    |
    | When auto processing is on. We will use this method to compute the temporary
    | file name. AdonisJs will compute a unique `tmpPath` for you automatically,
    | However, you can also define your own custom method.
    |
    */
    // tmpFileName () {
    // },

    /*
    |--------------------------------------------------------------------------
    | Encoding
    |--------------------------------------------------------------------------
    |
    | Request body encoding
    |
    */
    encoding: 'utf-8',

    /*
    |--------------------------------------------------------------------------
    | Convert empty strings to null
    |--------------------------------------------------------------------------
    |
    | Convert empty form fields to null. HTML forms results in field string
    | value when the field is left blank. This option normalizes all the blank
    | field values to "null"
    |
    */
    convertEmptyStringsToNull: true,

    /*
    |--------------------------------------------------------------------------
    | Max Fields
    |--------------------------------------------------------------------------
    |
    | The maximum number of fields allowed in the request body. The field includes
    | text inputs and files both.
    |
    */
    maxFields: 1000,

    /*
    |--------------------------------------------------------------------------
    | Request body limit
    |--------------------------------------------------------------------------
    |
    | The total limit to the multipart body. This includes all request files
    | and fields data.
    |
    */
    limit: '20mb',

    /*
    |--------------------------------------------------------------------------
    | Types
    |--------------------------------------------------------------------------
    |
    | The types that will be considered and parsed as multipart body.
    |
    */
    types: [
      'multipart/form-data',
    ],
  },
	  /*
  |--------------------------------------------------------------------------
  | Method Override
  |--------------------------------------------------------------------------
  |
  | Method override allows you to use HTTP verbs such as PUT, PATCH and DELETE
  | in HTML forms by defining a `_method` input field.
  |
  */
  methodOverride: {
    enabled: true,
    methodField: '_method',
  },
}

export default bodyParserConfig


## config/static.ts

/**
 * Config source: https://git.io/Jfefl
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import { AssetsConfig } from '@ioc:Adonis/Core/Static'

const staticConfig: AssetsConfig = {
  /*
  |--------------------------------------------------------------------------
  | Enabled
  |--------------------------------------------------------------------------
  |
  | A boolean to enable or disable serving static files. The static files
  | are served from the `public` directory inside the application root.
  | However, you can override the default path inside `.adonisrc.json`
  | file.
  |
  |
  */
  enabled: true,

  /*
  |--------------------------------------------------------------------------
  | Handling Dot Files
  |--------------------------------------------------------------------------
  |
  | Decide how you want the static assets server to handle the `dotfiles`.
  | By default, we ignore them as if they don't exists. However, you
  | can choose between one of the following options.
  |
  | - ignore: Behave as if the file doesn't exists. Results in 404.
  | - deny: Deny access to the file. Results in 403.
  | - allow: Serve the file contents
  |
  */
  dotFiles: 'ignore',

  /*
  |--------------------------------------------------------------------------
  | Generating Etag
  |--------------------------------------------------------------------------
  |
  | Handle whether or not to generate etags for the files. Etag allows browser
  | to utilize the cache when file hasn't been changed.
  |
  */
  etag: true,

  /*
  |--------------------------------------------------------------------------
  | Set Last Modified
  |--------------------------------------------------------------------------
  |
  | Whether or not to set the `Last-Modified` header in the response. Uses
  | the file system's last modified value.
  |
  */
  lastModified: true,

  /*
  |--------------------------------------------------------------------------
  | Max age
  |--------------------------------------------------------------------------
  |
  | Set the value for the max-age directive. Set a higher value in production
  | if you fingerprint your assets.
  |
  | Learn more: https://docs.adonisjs.com/guides/deployment#serving-static-assets
  |
  */
  maxAge: 0,

  /*
  |--------------------------------------------------------------------------
  | Immutable
  |--------------------------------------------------------------------------
  |
  | Set the immutable directive. Set it to `true` if the assets are generated
  | with a fingerprint. In others words the file name changes when the file
  | contents change.
  |
  */
  immutable: false,
}

export default staticConfig


## config/database.ts

/**
 * Config source: https://git.io/JesV9
 *
 * Feel free to let us know via PR, if you find something broken in this config
 * file.
 */

import Env from '@ioc:Adonis/Core/Env'
import Application from '@ioc:Adonis/Core/Application'
import type { DatabaseConfig } from '@ioc:Adonis/Lucid/Database'

const databaseConfig: DatabaseConfig = {
  /*
  |--------------------------------------------------------------------------
  | Connection
  |--------------------------------------------------------------------------
  |
  | The primary connection for making database queries across the application
  | You can use any key from the `connections` object defined in this same
  | file.
  |
  */
  connection: Env.get('DB_CONNECTION'),

  connections: {
    /*
    |--------------------------------------------------------------------------
    | SQLite
    |--------------------------------------------------------------------------
    |
    | Configuration for the SQLite database.  Make sure to install the driver
    | from npm when using this connection
    |
    | npm i sqlite3
    |
    */
    sqlite: {
      client: 'sqlite',
      connection: {
        filename: Application.tmpPath('db.sqlite3'),
      },
      pool: {
        afterCreate: (conn, cb) => {
          conn.run('PRAGMA foreign_keys=true', cb)
        }
      },
      migrations: {
        naturalSort: true,
      },
      useNullAsDefault: true,
      healthCheck: false,
      debug: false,
    },

    /*
    |--------------------------------------------------------------------------
    | PostgreSQL config
    |--------------------------------------------------------------------------
    |
    | Configuration for PostgreSQL database. Make sure to install the driver
    | from npm when using this connection
    |
    | npm i pg
    |
    */
    pg: {
      client: 'pg',
      connection: {
        host: Env.get('PG_HOST'),
        port: Env.get('PG_PORT'),
        user: Env.get('PG_USER'),
        password: Env.get('PG_PASSWORD', ''),
        database: Env.get('PG_DB_NAME'),
      },
      migrations: {
        naturalSort: true,
      },
      healthCheck: false,
      debug: false,
    },

  }
}

export default databaseConfig



# MIDDLEWARE
#
## app/Middleware/SilentAuth.ts

import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'

/**
 * Silent auth middleware can be used as a global middleware to silent check
 * if the user is logged-in or not.
 *
 * The request continues as usual, even when the user is not logged-in.
 */
export default class SilentAuthMiddleware {
  /**
   * Handle request
   */
  public async handle({ auth }: HttpContextContract, next: () => Promise<void>) {
    /**
     * Check if user is logged-in or not. If yes, then `ctx.auth.user` will be
     * set to the instance of the currently logged in user.
     */
    await auth.check()
    await next()
  }
}


## app/Middleware/Auth.ts

import { AuthenticationException } from '@adonisjs/auth/build/standalone'
import type { GuardsList } from '@ioc:Adonis/Addons/Auth'
import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'

/**
 * Auth middleware is meant to restrict un-authenticated access to a given route
 * or a group of routes.
 *
 * You must register this middleware inside `start/kernel.ts` file under the list
 * of named middleware.
 */
export default class AuthMiddleware {
  /**
   * The URL to redirect to when request is Unauthorized
   */
  protected redirectTo = '/login'

  /**
   * Authenticates the current HTTP request against a custom set of defined
   * guards.
   *
   * The authentication loop stops as soon as the user is authenticated using any
   * of the mentioned guards and that guard will be used by the rest of the code
   * during the current request.
   */
  protected async authenticate(auth: HttpContextContract['auth'], guards: (keyof GuardsList)[]) {
    /**
     * Hold reference to the guard last attempted within the for loop. We pass
     * the reference of the guard to the "AuthenticationException", so that
     * it can decide the correct response behavior based upon the guard
     * driver
     */
    let guardLastAttempted: string | undefined

    for (let guard of guards) {
      guardLastAttempted = guard

      if (await auth.use(guard).check()) {
        /**
         * Instruct auth to use the given guard as the default guard for
         * the rest of the request, since the user authenticated
         * succeeded here
         */
        auth.defaultGuard = guard
        return true
      }
    }

    /**
     * Unable to authenticate using any guard
     */
    throw new AuthenticationException(
      'Unauthorized access',
      'E_UNAUTHORIZED_ACCESS',
      guardLastAttempted,
      this.redirectTo,
    )
  }

  /**
   * Handle request
   */
  public async handle (
    { auth }: HttpContextContract,
    next: () => Promise<void>,
    customGuards: (keyof GuardsList)[]
  ) {
    /**
     * Uses the user defined guards or the default guard mentioned in
     * the config file
     */
    const guards = customGuards.length ? customGuards : [auth.name]
    await this.authenticate(auth, guards)
    await next()
  }
}



# MIGRATIONS
#
## database/migrations/1748636688321_create_tables.ts

import BaseSchema from '@ioc:Adonis/Lucid/Schema'

export default class extends BaseSchema {
	async up () {
		this.schema.createTable('users', (table) => {
			table.increments('id')
			table.string('email').notNullable().unique()
			table.string('password').notNullable()
			table.boolean('admin').defaultTo(false)
			table.string('name')
			table.timestamps(true)
		})

		this.schema.createTable('plants', (table) => {
			table.increments('id')
			table.string('name')
			table.integer('price')
			table.text('description')
			table.integer('stock')
			table.timestamps(true)
		})

		this.schema.createTable('orders', (table) => {
			table.increments('id')
			table.integer('user_id').unsigned().references('id').inTable('users').onDelete('CASCADE')
			table.integer('total_price')
			table.string('status')
			table.timestamps(true)
		})

		this.schema.createTable('order_items', (table) => {
			table.increments('id')
			table.integer('order_id').unsigned().references('id').inTable('orders').onDelete('CASCADE')
			table.integer('plant_id').unsigned().references('id').inTable('plants').onDelete('CASCADE')
			table.integer('quantity')
			table.timestamps(true)
		})
	}

	async down () {
		this.schema.dropTable('order_items')
		this.schema.dropTable('orders')
		this.schema.dropTable('plants')
		this.schema.dropTable('users')
	}
}



# SEEDERS
#
## database/seeders/Seed.ts

// database/seeders/Seed.ts

/**
	Seed principale du projet PlantShop
	- NB_ADMINS administrateurs (email : adminX@planteshop.com, password : 'password')
	- NB_USERS utilisateurs (email/password aléatoires, longueur ≥12)
	- 30 plantes créées
	- Génération de commandes (2 plantes par utilisateur)
	- users.txt mis à jour avec tous les identifiants générés
*/

import BaseSeeder from '@ioc:Adonis/Lucid/Seeder'
import User from 'App/Models/User'
import Plant from 'App/Models/Plant'
import Order from 'App/Models/Order'
import OrderItem from 'App/Models/OrderItem'
import * as fs from 'fs'
import * as path from 'path'
import Hash from '@ioc:Adonis/Core/Hash'
import { faker } from '@faker-js/faker'

/**
	Réinitialise toutes les données
*/
async function resetData() {
	await OrderItem.query().delete()
	await Order.query().delete()
	await Plant.query().delete()
	await User.query().delete()
}

/**
	Crée les administrateurs
	@return tableau d'admins (utilisé pour users.txt)
*/
async function createAdmins(nombreAdmins: number) {
	const admins = []
	for (let index = 0; index < nombreAdmins; index++) {
		const password = 'password'
		const hashedPassword = await Hash.make(password)
		const admin = await User.create({
			email: `admin${index + 1}@planteshop.com`,
			password: hashedPassword,
			admin: true,
			name: faker.person.fullName()
		})
		admins.push({ email: admin.email, password })
	}
	return admins
}

/**
	Crée les utilisateurs
	@return tableau d'utilisateurs (utilisé pour users.txt)
*/
async function createUsers(nombreUsers: number) {
	const users = []
	for (let index = 0; index < nombreUsers; index++) {
		const password = faker.internet.password({ length: 12 })
		const hashedPassword = await Hash.make(password)
		const user = await User.create({
			email: faker.internet.email(),
			password: hashedPassword,
			admin: false,
			name: faker.person.fullName()
		})
		users.push({ email: user.email, password })
	}
	return users
}

/**
	Crée les plantes (NB_PLANTES)
	@return tableau de plantes
*/
async function createPlants(nombrePlantes: number) {
	const nomsPlantes = [
		"Rose", "Tulipe", "Lavande", "Orchidée", "Basilic", "Menthe", "Pivoine", "Tournesol",
		"Cactus (Echinopsis)", "Bambou", "Camomille (Matricaria recutita)", "Sauge (Salvia officinalis)",
		"Romarin (Rosmarinus officinalis)", "Thym (Thymus vulgaris)", "Laurier-rose (Nerium oleander)",
		"Aloe vera", "Jasmin (Jasminum officinale)", "Hortensia (Hydrangea macrophylla)",
		"Marguerite (Leucanthemum vulgare)", "Géranium (Pelargonium graveolens)", "Fuchsia (Fuchsia magellanica)",
		"Anémone (Anemone coronaria)", "Azalée (Rhododendron simsii)", "Chrysanthème (Chrysanthemum morifolium)",
		"Digitale pourpre (Digitalis purpurea)", "Glaïeul (Gladiolus hortulanus)", "Lys (Lilium candidum)",
		"Violette (Viola odorata)", "Muguet (Convallaria majalis)", "Iris (Iris germanica)",
		"Lavandin (Lavandula intermedia)", "Érable du Japon (Acer palmatum)", "Citronnelle (Cymbopogon citratus)",
		"Pin parasol (Pinus pinea)", "Cyprès (Cupressus sempervirens)", "Olivier (Olea europaea)",
		"Papyrus (Cyperus papyrus)", "Figuier (Ficus carica)", "Eucalyptus (Eucalyptus globulus)",
		"Acacia (Acacia dealbata)", "Bégonia (Begonia semperflorens)", "Calathea (Calathea ornata)",
		"Dieffenbachia (Dieffenbachia seguine)", "Ficus elastica", "Sansevieria (Sansevieria trifasciata)",
		"Philodendron (Philodendron scandens)", "Yucca (Yucca elephantipes)", "Zamioculcas zamiifolia",
		"Monstera deliciosa", "Pothos (Epipremnum aureum)", "Agave (Agave americana)", "Cactus raquette (Opuntia ficus-indica)",
		"Palmier-dattier (Phoenix dactylifera)", "Amaryllis (Hippeastrum hybridum)", "Bleuet (Centaurea cyanus)",
		"Cœur-de-Marie (Lamprocapnos spectabilis)", "Croton (Codiaeum variegatum)", "Dracaena (Dracaena marginata)",
		"Hosta (Hosta plantaginea)", "Lierre (Hedera helix)", "Mimosa (Acacia dealbata)"
	]
	const plants = []
	const nomsTaille = nomsPlantes.length
	for (let index = 0; index < nombrePlantes; index++) {
		const nomBase = nomsPlantes[index % nomsTaille]
		const nom = nombrePlantes > nomsTaille ? `${nomBase} ${Math.floor(index / nomsTaille) + 1}` : nomBase
		const plant = await Plant.create({
			name: nom,
			price: faker.number.int({ min: 5, max: 50 }),
			description: faker.lorem.sentence({ min: 10, max: 14 }),
			stock: faker.number.int({ min: 5, max: 30 })
		})
		plants.push(plant)
	}
	return plants
}

/**
	Crée les commandes (2 plantes par user)
*/
async function createOrders(users, plants) {
	for (const user of await User.all()) {
		let total = 0
		const order = await Order.create({
			userId: user.id,
			totalPrice: 0,
			status: faker.helpers.arrayElement(['confirmed', 'pending', 'shipped', 'delivered'])
		})
		for (let i = 0; i < 2; i++) {
			const plant = plants[Math.floor(Math.random() * plants.length)]
			const quantity = Math.min(faker.number.int({ min: 1, max: 5 }), plant.stock)
			if (quantity === 0) continue
			await OrderItem.create({
				orderId: order.id,
				plantId: plant.id,
				quantity: quantity
			})
			total += plant.price * quantity
			plant.stock = plant.stock - quantity
			await plant.save()
		}
		order.totalPrice = total
		await order.save()
	}
}

/**
	Écrit les utilisateurs/admins dans users.txt
*/
function writeUsersFile(admins, users) {
	const filePath = path.join(process.cwd(), 'users.txt')
	let content = 'Administrateurs :\n\n'
	admins.forEach(admin => { content += `${admin.email} ${admin.password}\n` })
	content += '\nUtilisateurs :\n\n'
	users.forEach(user => { content += `${user.email} ${user.password}\n` })
	fs.writeFileSync(filePath, content, 'utf8')
}

export default class Seed extends BaseSeeder {
	public async run() {
		const NB_ADMINS = 3
		const NB_USERS = 20
		const NB_PLANTES = 30

		await resetData()
		const admins = await createAdmins(NB_ADMINS)
		const users = await createUsers(NB_USERS)
		const plants = await createPlants(NB_PLANTES)
		writeUsersFile(admins, users)
		await createOrders([...admins, ...users], plants)

		console.log('✅ Seed terminée. Données en base et fichier `users.txt` mis à jour.')
	}
}



# FACTORIES
#
## database/factories/index.ts

// import Factory from '@ioc:Adonis/Lucid/Factory'



# VUES
#
## resources/views/sessions/login.edge

@layout('layouts/application')

@section('title')
Connexion
@endsection

@section('content')
	<h1>Connexion</h1>
	@if(flashMessages.get('error'))
		<div class="alert alert-danger">{{ flashMessages.get('error') }}</div>
	@endif
	<form method="POST" action="{{ route('login.perform') }}">
		{{ csrfField() }}
		<div class="mb-3">
			<label>Email</label>
			<input type="email" name="email" class="form-control" required>
		</div>
		<div class="mb-3">
			<label>Mot de passe</label>
			<input type="password" name="password" class="form-control" required>
		</div>
		<button type="submit" class="btn btn-primary">Se connecter</button>
	</form>
	<p class="mt-3">
		Pas encore inscrit ?
		<a href="{{ route('register.show') }}">Créer un compte</a>
	</p>
@endsection


## resources/views/admin/plants/edit.edge

@layout('layouts/application')

@section('title')
Modifier plante
@end

@section('content')
	<div class="container mt-4">
		<h1 class="mb-4">Modifier une plante</h1>

		@set('action', route('admin.plants.update', { id: plante.id }))
		@set('method', 'PUT')
		@include('admin/plants/_form')
	</div>
@end


## resources/views/admin/plants/new.edge

@layout('layouts/application')

@section('title')
Nouvelle plante
@end

@section('content')
	<h1>Créer une plante</h1>
	@include('admin/plants/_form', { plant: {}, action: route('admin.plants.store'), method: 'POST' })
@end


## resources/views/admin/plants/index.edge

@layout('layouts/application')

@section('title')
Gestion des plantes
@end

@section('content')
	<h1 class="mb-4">Gestion des Plantes</h1>

	<div class="mb-3">
		<a href="{{ route('admin.plants.create') }}" class="btn btn-outline-success">Nouvelle Plante</a>
	</div>

	<table class="table table-striped table-hover">
		<thead class="table-light">
			<tr>
				<th>Nom</th>
				<th>Prix</th>
				<th>Stock</th>
				<th class="text-center">Actions</th>
			</tr>
		</thead>
		<tbody>
			@each(plant in plantes)
				<tr>
					<td>
						<a href="{{ route('plants.show', { id: plant.id }) }}" class="text-decoration-none text-dark">
							{{ plant.name }}
						</a>
					</td>
					<td>{{ plant.price }} €</td>
					<td>{{ plant.stock }}</td>
					<td class="text-center">
						<div class="d-flex justify-content-center gap-2">
							<a href="{{ route('admin.plants.edit', { id: plant.id }) }}" class="btn btn-warning btn-sm">✏ Modifier</a>
							<form method="POST" action="{{ route('admin.plants.destroy', { id: plant.id }) }}"
										onsubmit="return confirm('Voulez-vous supprimer cette plante ?')">
								{{ csrfField() }}
								<button type="submit" class="btn btn-danger">🗑 Supprimer</button>
							</form>
						</div>
					</td>
				</tr>
			@endeach
		</tbody>
	</table>
@end


## resources/views/admin/plants/create.edge

@layout('layouts/application')

@section('title')
Créer une plante
@end

@section('content')
	<div class="container mt-4">
		<h1 class="mb-4">Nouvelle plante</h1>

		@set('action', route('admin.plants.store'))
		@set('method', 'POST')
		@set('plante', { name: '', price: '', description: '', stock: '' })
		@include('admin/plants/_form')
	</div>
@end


## resources/views/admin/plants/_form.edge

<form method="POST" action="{{ action }}">
	{{ csrfField() }}
	<input type="hidden" name="_method" value="{{ method }}">

	<div class="mb-3">
		<label for="name" class="form-label">Nom de la plante</label>
		<input type="text" name="name" id="name" value="{{ plante.name }}" class="form-control" required>
	</div>

	<div class="mb-3">
		<label for="price" class="form-label">Prix (€)</label>
		<input type="number" name="price" id="price" value="{{ plante.price }}" step="0.01" class="form-control" required>
	</div>

	<div class="mb-3">
		<label for="description" class="form-label">Description</label>
		<textarea name="description" id="description" rows="5" class="form-control">{{ plante.description }}</textarea>
	</div>

	<div class="mb-3">
		<label for="stock" class="form-label">Stock</label>
		<input type="number" name="stock" id="stock" value="{{ plante.stock }}" class="form-control" required>
	</div>

	<button type="submit" class="btn btn-primary">
		{{ plante.id ? 'Mettre à jour' : 'Créer' }}
	</button>
</form>


## resources/views/admin/users/show.edge

@layout('layouts/application')

@section('title')
Détail utilisateur
@end

@section('content')
<h1>Détail utilisateur</h1>
<ul>
	<li>ID : {{ user.id }}</li>
	<li>Nom : {{ user.name }}</li>
	<li>Email : {{ user.email }}</li>
	<li>Admin : {{ user.admin ? 'Oui' : 'Non' }}</li>
</ul>
<a href="{{ route('admin.users.edit', { id: user.id }) }}">Modifier</a>
@end


## resources/views/admin/users/edit.edge

@layout('layouts/application')

@section('title')
Modifier l’utilisateur
@end

@section('content')
	<h1>Modifier l’utilisateur</h1>
	<form method="POST" action="{{ route('admin.users.update', { id: utilisateur.id }, { qs: { _method: 'PUT' } }) }}">
		{{ csrfField() }}

		<div class="mb-3">
			<label for="email" class="form-label">Email</label>
			<input type="email" id="email" name="email" class="form-control" value="{{ utilisateur.email }}" required>
		</div>

		<div class="mb-3">
			<label for="name" class="form-label">Nom</label>
			<input type="text" id="name" name="name" class="form-control" value="{{ utilisateur.name }}" required>
		</div>

		<div class="mb-3 form-check">
			<input type="checkbox" id="admin" name="admin" class="form-check-input" {{ utilisateur.admin ? 'checked' : '' }}>
			<label for="admin" class="form-check-label">Administrateur</label>
		</div>

		<button type="submit" class="btn btn-primary">Enregistrer</button>
	</form>
@end


## resources/views/admin/users/index.edge

@layout('layouts/application')

@section('title')
Liste des utilisateurs
@end

@section('content')
	<h1 class="mb-4">Gestion des Utilisateurs</h1>

	<table class="table table-striped table-hover">
		<thead class="table-light">
			<tr>
				<th>Nom</th>
				<th>Email</th>
				<th>Administrateur</th>
				<th class="text-center">Actions</th>
			</tr>
		</thead>
		<tbody>
			@each(user in utilisateurs)
				<tr>
					<td>
						<a href="{{ route('admin.users.show', { id: user.id }) }}" class="text-decoration-none text-dark">
							{{ user.name }}
						</a>
					</td>
					<td>{{ user.email }}</td>
					<td>
						<span class="badge {{ user.admin ? 'bg-success' : 'bg-secondary' }}">
							{{ user.admin ? 'Oui' : 'Non' }}
						</span>
					</td>
					<td class="text-center">
						<div class="d-flex justify-content-center gap-2">
							<a href="{{ route('admin.users.edit', { id: user.id }) }}" class="btn btn-warning btn-sm">✏ Modifier</a>
							<form method="POST" action="{{ route('admin.users.destroy', { id: user.id }) }}" class="d-inline">
								{{ csrfField() }}
								<button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Supprimer cet utilisateur ?')">🗑 Supprimer</button>
							</form>
						</div>
					</td>
				</tr>
			@endeach
		</tbody>
	</table>
@end


## resources/views/plants/show.edge

@layout('layouts/application')

@section('title')
{{ plant.name }}
@end

@section('content')
<div class="card shadow-lg">
	<div class="card-body">
		<h1 class="card-title">{{ plant.name }}</h1>
		<p><strong>Prix :</strong> {{ plant.price }} €</p>
		<p><strong>Description :</strong> {{ plant.description }}</p>
		@if(auth.user?.admin)
			<p><strong>Stock :</strong> {{ plant.stock }} unités</p>
		@end
		<div class="d-flex flex-wrap gap-2 mb-2">
			<button class="btn btn-success"
				onclick="cartInstance.add({{ plant.id }}, '{{ plant.name }}', {{ plant.price }}, {{ plant.stock }})">
				Ajouter au panier
			</button>
			@if(auth.user?.admin)
				<a href="{{ route('admin.plants.edit', { id: plant.id }) }}" class="btn btn-warning">Modifier</a>
				<form method="POST" action="{{ route('admin.plants.destroy', { id: plant.id }) }}"
							onsubmit="return confirm('Voulez-vous supprimer cette plante ?')">
					{{ csrfField() }}
					<button type="submit" class="btn btn-danger">Supprimer</button>
				</form>
			@end
		</div>
		<div class="mt-3">
			<a href="{{ route('PlantsController.index') }}" class="btn btn-secondary">Retour à la liste</a>
		</div>
	</div>
</div>
@end


## resources/views/plants/edit.edge

@layout('layouts/application')

@section('content')
<h1>Modifier la plante</h1>
<form method="POST" action="{{ route('plants.update', {id: plant.id}) }}">
	{{ csrfField() }}
	<input type="hidden" name="_method" value="PUT">
	<label>Nom : <input type="text" name="name" value="{{ plant.name }}"></label><br>
	<label>Description : <textarea name="description">{{ plant.description }}</textarea></label><br>
	<label>Prix : <input type="number" step="0.01" name="price" value="{{ plant.price }}"></label><br>
	<label>Stock : <input type="number" name="stock" value="{{ plant.stock }}"></label><br>
	<button type="submit">Mettre à jour</button>
</form>
@endsection


## resources/views/plants/index.edge

@layout('layouts/application')

@section('title')
Liste des plantes
@endsection

@section('content')
<h1 class="text-center mb-4">🌿 Liste des Plantes</h1>

@if(auth.user && auth.user.admin)
	<a href="{{ route('Admin/PlantsController.create') }}" class="btn btn-success mb-3">Nouvelle Plante</a>
@endif

<div class="row">
	@each(plant in plants)
	<div class="col-md-4">
		<div class="card mb-4 shadow-sm">
			<div class="card-body">
				<h5 class="card-title">
					<a href="{{ route('plants.show', { id: plant.id }) }}" class="text-decoration-none text-dark">
						{{ plant.name }}
					</a>
				</h5>
				<p class="card-text">
					<strong>Prix :</strong> {{ plant.price }} €<br>
					@if(auth.user?.admin)
						<strong>Stock :</strong> {{ plant.stock }} unités
					@endif
				</p>
				<button class="btn btn-success w-100"
					onclick="cartInstance.add({{ plant.id }}, '{{ plant.name }}', {{ plant.price }}, {{ plant.stock }})">
					Ajouter au panier
				</button>
			</div>
		</div>
	</div>
	@endeach
</div>
@endsection


## resources/views/carts/index.edge

@layout('layouts/application')

@section('title')
Mon panier
@endsection

@section('content')
	<h1 class="text-center mb-4">🛒 Mon Panier</h1>
	<div id="cart-container">
		<p class="alert alert-info">Chargement du panier...</p>
	</div>
@endsection


## resources/views/orders/show.edge

@layout('layouts/application')

@section('title')
{{ plant.name }}
@end

@section('content')
<div class="card shadow-lg">
	<div class="card-body">
		<h1 class="card-title">{{ plant.name }}</h1>
		<p><strong>Prix :</strong> {{ plant.price }} €</p>
		<p><strong>Description :</strong> {{ plant.description }}</p>
		@if(auth.user?.admin)
			<p><strong>Stock :</strong> {{ plant.stock }} unités</p>
		@end
		<div class="d-flex flex-wrap gap-2 mb-2">
			<button class="btn btn-success"
				onclick="cartInstance.add({{ plant.id }}, '{{ plant.name }}', {{ plant.price }}, {{ plant.stock }})">
				Ajouter au panier
			</button>
			@if(auth.user?.admin)
				<a href="{{ route('admin.plants.edit', { id: plant.id }) }}">Modifier</a>
				<form method="POST" action="{{ route('admin.plants.destroy', { id: plant.id }) }}" class="d-inline" onsubmit="return confirm('Supprimer cette plante ?')">
					{{ csrfField() }}
					<input type="hidden" name="_method" value="DELETE">
					<button type="submit" class="btn btn-danger">Supprimer</button>
				</form>
			@end
		</div>
		<div class="mt-3">
			<a href="{{ route('PlantsController.index') }}" class="btn btn-secondary">Retour à la liste</a>
		</div>
	</div>
</div>
@end


## resources/views/orders/new.edge

@layout('layouts/application')

@section('title')
Nouvelle commande
@end

@section('content')
<h1 class="text-center mb-4">Valider ma commande</h1>

@if(flashMessages.get('alert'))
	<div class="alert alert-danger">
		{{ flashMessages.get('alert') }}
	</div>
@endif

<div id="order-review-container">
	<p class="alert alert-info">Chargement de votre panier...</p>
</div>

<form id="order-form" method="POST" action="{{ route('OrdersController.create') }}">
	{{ csrfField() }}
	<input type="hidden" name="order.items" id="order-items-input">
	<button type="submit" class="btn btn-success w-100 mt-3">Confirmer la commande</button>
</form>

<script>
document.getElementById("order-form").addEventListener("submit", function() {
	cartInstance.clear()
})
</script>

@end


## resources/views/orders/_order_card.edge

<div>
	<p>Commande #{{ order.id }} - {{ order.totalPrice }} €</p>
	<p>Status : {{ order.status }}</p>
</div>


## resources/views/orders/index.edge

@layout('layouts/application')

@section('title')
Mes commandes
@end

@section('content')
<h1 class="text-center mb-4">📜 Mes Commandes</h1>
@if(commandes && commandes.length > 0)
  @each((order, index) in commandes)
    <div class="card mb-3 shadow-sm">
      <div class="card-body">
        <h5 class="card-title">Commande n°{{ commandes.length - index }}</h5>
        <p class="mb-1 text-muted">
          Passée le {{ new Date(order.createdAt).toLocaleDateString('fr-FR') }} {{ new Date(order.createdAt).toLocaleTimeString('fr-FR', {hour: '2-digit', minute:'2-digit'}) }} – Total : {{ order.totalPrice.toFixed(2).replace('.', ',') }} €
        </p>
        <ul class="mb-2">
          @each(item in order.orderItems)
            <li>
              <a href="{{ route('PlantsController.show', { id: item.plant.id }) }}" class="text-decoration-none text-primary">
                {{ item.plant.name }}
              </a> {{ item.quantity }} × {{ item.plant.price.toFixed(2).replace('.', ',') }} €
            </li>
          @endeach
        </ul>
        <p><strong>Statut :</strong> {{ order.status }}</p>
      </div>
    </div>
  @endeach
@else
  <p class="alert alert-info">Aucune commande pour le moment.</p>
@endif
@end


## resources/views/orders/create.edge

@layout('layouts/application')

@section('title')
Commande créée
@end

@section('content')
<h1>Commande créée</h1>
<p>Votre commande a bien été enregistrée.</p>
<a href="{{ route('OrdersController.index') }}">Retour à mes commandes</a>
@end


## resources/views/layouts/_flash_messages.edge

{{-- @if(flashMessages?.all())
	@each(key in flashMessages.keys())
		<div class="flash-{{ key }}">{{ flashMessages.get(key) }}</div>
	@endeach
@endif --}}


## resources/views/layouts/application.edge

<!DOCTYPE html>
<html lang="fr">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Magasin de plantes</title>

	<!-- Bootstrap CSS -->
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
	<!-- Costum CSS  -->
	<link rel="stylesheet" href="/styles.css">
		<!-- Costum Javascriptd  -->
	<script src="/js/application.js"></script>
</head>
<body>
	<!-- Bootstrap JS -->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

	@include('layouts/_flash_messages')
	@include('layouts/_navbar')

	<div class="container mt-4">
		@!section('content')
	</div>
</body>
</html>


## resources/views/layouts/_navbar.edge

<nav class="navbar navbar-expand-lg navbar-dark custom-navbar">
	<div class="container">
		<a class="navbar-brand" href="{{ route('home') }}">🌿 PlantShop</a>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
			<span class="navbar-toggler-icon"></span>
		</button>

		<div class="collapse navbar-collapse" id="navbarNav">
			<ul class="navbar-nav ms-auto">
				@if(auth.user && auth.user.name)
				<li class="nav-item d-flex align-items-center text-white me-3">
					{{ auth.user.name.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') }}
					@if(typeof auth.user.admin !== 'undefined' && auth.user.admin)
					(Administrateur)
					@endif
				</li>
				@endif

				<li class="nav-item">
					<a class="nav-link" href="{{ route('carts.index') }}" id="cart-link">Mon Panier</a>
				</li>

				@if(auth.user)
				<li class="nav-item">
					<a class="nav-link" href="{{ route('orders.index') }}">Mes Commandes</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="{{ route('users.show', { id: auth.user.id }) }}">Mon Profil</a>
				</li>
				@if(auth.user.admin)
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">Admin</a>
					<ul class="dropdown-menu">
						<li><a class="dropdown-item" href="{{ route('admin.plants.index') }}">Gestion des Plantes</a></li>
						<li><a class="dropdown-item" href="{{ route('admin.users.index') }}">Gestion des Utilisateurs</a></li>
					</ul>
				</li>
				@endif
				<li class="nav-item logout-item">
					<form method="POST" action="{{ route('logout') }}">
						{{ csrfField() }}
						<button type="submit" class="nav-link">Déconnexion</button>
					</form>
				</li>
				@else
				<li class="nav-item">
					<a class="nav-link" href="{{ route('register.show') }}">S'inscrire</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="{{ route('login.show') }}">Se Connecter</a>
				</li>
				@endif
			</ul>
		</div>
	</div>
</nav>


## resources/views/registrations/register.edge

@layout('layouts/application')

@section('title')
S'inscrire
@endsection

@section('content')
	<h1>S'inscrire</h1>

	@if(flashMessages.get('error'))
		<div class="alert alert-danger">{{ flashMessages.get('error') }}</div>
	@endif

	<form method="POST" action="{{ route('register.perform') }}">
		{{ csrfField() }}

		<div class="mb-3">
			<label for="name" class="form-label">Nom</label>
			<input type="text" id="name" name="name" class="form-control" required>
		</div>

		<div class="mb-3">
			<label for="email" class="form-label">Email</label>
			<input type="email" id="email" name="email" class="form-control" required>
		</div>

		<div class="mb-3">
			<label for="password" class="form-label">Mot de passe</label>
			<input type="password" id="password" name="password" class="form-control" required>
		</div>

		<div class="mb-3">
			<label for="password_confirmation" class="form-label">Confirmation</label>
			<input type="password" id="password_confirmation" name="password_confirmation" class="form-control" required>
		</div>

		<button type="submit" class="btn btn-primary">Créer un compte</button>
	</form>

	<p class="mt-3">
		Déjà inscrit ? <a href="{{ route('login.show') }}">Se connecter</a>
	</p>
@endsection


## resources/views/errors/unauthorized.edge

@layout('layouts/application')

@section('title')
Erreur 403
@end

@section('content')
<p>It's a 403</p>
@end


## resources/views/errors/server-error.edge

@layout('layouts/application')

@section('title')
Erreur 500
@end

@section('content')
<p>It's a 500</p>
@end


## resources/views/errors/not-found.edge

@layout('layouts/application')

@section('title')
Erreur 404
@end

@section('content')
<p>It's a 404</p>
@end


## resources/views/users/show.edge

@layout('layouts/application')

@section('title')
Mon profil
@end

@section('content')
	<h1>Profil</h1>
	@if(utilisateur.name)
		<p><strong>Nom :</strong> {{ utilisateur.name }}</p>
	@endif

	<p><strong>Email :</strong> {{ utilisateur.email }}</p>

	<a href="{{ route('UsersController.edit', { id: utilisateur.id }) }}" class="btn btn-primary">Modifier mon profil</a>
@end


## resources/views/users/edit.edge

@layout('layouts/application')

@section('title')
Modifier mon profil
@end

@section('content')
	<h1>Modifier le profil</h1>
	<form method="POST" action="{{ route('users.update', { id: utilisateur.id }) }}">
		{{ csrfField() }}

		@if(utilisateur.errors && Object.keys(utilisateur.errors).length)
			<div class="alert alert-danger">
				<ul>
					@each(error in Object.values(utilisateur.errors).flat())
						<li>{{ error }}</li>
					@end
				</ul>
			</div>
		@endif

		<div class="mb-3">
			<label for="email" class="form-label">Email</label>
			<input type="email" name="email" id="email" value="{{ utilisateur.email }}" class="form-control" required>
		</div>

		<div class="mb-3">
			<label for="name" class="form-label">Nom</label>
			<input type="text" name="name" id="name" value="{{ utilisateur.name }}" class="form-control" required>
		</div>

		<button type="submit" class="btn btn-primary">Enregistrer</button>
	</form>
@end



# PROVIDERS
#
## providers/AppProvider.ts

import type { ApplicationContract } from '@ioc:Adonis/Core/Application'

export default class AppProvider {
  constructor (protected app: ApplicationContract) {
  }

  public register () {
    // Register your own bindings
  }

  public async boot () {
    // IoC container is ready
  }

  public async ready () {
    // App is ready
  }

  public async shutdown () {
    // Cleanup, since app is going down
  }
}



# CONTRATS
#
## contracts/events.ts

/**
 * Contract source: https://git.io/JfefG
 *
 * Feel free to let us know via PR, if you find something broken in this contract
 * file.
 */

declare module '@ioc:Adonis/Core/Event' {
  /*
  |--------------------------------------------------------------------------
  | Define typed events
  |--------------------------------------------------------------------------
  |
  | You can define types for events inside the following interface and
  | AdonisJS will make sure that all listeners and emit calls adheres
  | to the defined types.
  |
  | For example:
  |
  | interface EventsList {
  |   'new:user': UserModel
  | }
  |
  | Now calling `Event.emit('new:user')` will statically ensure that passed value is
  | an instance of the the UserModel only.
  |
  */
  interface EventsList {
    //
  }
}


## contracts/drive.ts

/**
 * Contract source: https://git.io/JBt3I
 *
 * Feel free to let us know via PR, if you find something broken in this contract
 * file.
 */

import type { InferDisksFromConfig } from '@adonisjs/core/build/config'
import type driveConfig from '../config/drive'

declare module '@ioc:Adonis/Core/Drive' {
  interface DisksList extends InferDisksFromConfig<typeof driveConfig> {}
}


## contracts/auth.ts

/**
 * Contract source: https://git.io/JOdz5
 *
 * Feel free to let us know via PR, if you find something broken in this
 * file.
 */

import User from 'App/Models/User'

declare module '@ioc:Adonis/Addons/Auth' {
  /*
  |--------------------------------------------------------------------------
  | Providers
  |--------------------------------------------------------------------------
  |
  | The providers are used to fetch users. The Auth module comes pre-bundled
  | with two providers that are `Lucid` and `Database`. Both uses database
  | to fetch user details.
  |
  | You can also create and register your own custom providers.
  |
  */
  interface ProvidersList {
    /*
    |--------------------------------------------------------------------------
    | User Provider
    |--------------------------------------------------------------------------
    |
    | The following provider uses Lucid models as a driver for fetching user
    | details from the database for authentication.
    |
    | You can create multiple providers using the same underlying driver with
    | different Lucid models.
    |
    */
    user: {
      implementation: LucidProviderContract<typeof User>
      config: LucidProviderConfig<typeof User>
    }
  }

  /*
  |--------------------------------------------------------------------------
  | Guards
  |--------------------------------------------------------------------------
  |
  | The guards are used for authenticating users using different drivers.
  | The auth module comes with 3 different guards.
  |
  | - SessionGuardContract
  | - BasicAuthGuardContract
  | - OATGuardContract ( Opaque access token )
  |
  | Every guard needs a provider for looking up users from the database.
  |
  */
  interface GuardsList {
    /*
    |--------------------------------------------------------------------------
    | Web Guard
    |--------------------------------------------------------------------------
    |
    | The web guard uses sessions for maintaining user login state. It uses
    | the `user` provider for fetching user details.
    |
    */
    web: {
      implementation: SessionGuardContract<'user', 'web'>
      config: SessionGuardConfig<'user'>
      client: SessionClientContract<'user'>
    }
  }
}


## contracts/tests.ts

/**
 * Contract source: https://bit.ly/3DP1ypf
 *
 * Feel free to let us know via PR, if you find something broken in this contract
 * file.
 */

import '@japa/runner'

declare module '@japa/runner' {
  interface TestContext {
    // Extend context
  }

  interface Test<TestData> {
    // Extend test
  }
}


## contracts/hash.ts

/**
 * Contract source: https://git.io/Jfefs
 *
 * Feel free to let us know via PR, if you find something broken in this contract
 * file.
 */

import type { InferListFromConfig } from '@adonisjs/core/build/config'
import type hashConfig from '../config/hash'

declare module '@ioc:Adonis/Core/Hash' {
  interface HashersList extends InferListFromConfig<typeof hashConfig> {}
}


## contracts/env.ts

/**
 * Contract source: https://git.io/JTm6U
 *
 * Feel free to let us know via PR, if you find something broken in this contract
 * file.
 */

declare module '@ioc:Adonis/Core/Env' {
  /*
  |--------------------------------------------------------------------------
  | Getting types for validated environment variables
  |--------------------------------------------------------------------------
  |
  | The `default` export from the "../env.ts" file exports types for the
  | validated environment variables. Here we merge them with the `EnvTypes`
  | interface so that you can enjoy intellisense when using the "Env"
  | module.
  |
  */

  type CustomTypes = typeof import('../env').default
  interface EnvTypes extends CustomTypes {
  }
}



# COMMANDES
#
## commands/index.ts

import { listDirectoryFiles } from '@adonisjs/core/build/standalone'
import Application from '@ioc:Adonis/Core/Application'

/*
|--------------------------------------------------------------------------
| Exporting an array of commands
|--------------------------------------------------------------------------
|
| Instead of manually exporting each file from this directory, we use the
| helper `listDirectoryFiles` to recursively collect and export an array
| of filenames.
|
| Couple of things to note:
|
| 1. The file path must be relative from the project root and not this directory.
| 2. We must ignore this file to avoid getting into an infinite loop
|
*/
export default listDirectoryFiles(__dirname, Application.appRoot, ['./commands/index'])



# STATISTIQUES
#
      1 ## ace-manifest.json
      1 ## .adonisrc.json
     14 ## app
      1 ## commands
     10 ## config
      6 ## contracts
      3 ## database
      1 ## .env.example
      1 ## env.ts
      1 ## package.json
      1 ## providers
     27 ## resources
      1 ## server.ts
      2 ## start
      1 ## tsconfig.json
